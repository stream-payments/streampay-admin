import {
  require_lib
} from "./chunk-F3JJWJZL.js";
import {
  QueryClientProvider,
  useMutation,
  useQuery,
  useQueryClient
} from "./chunk-USFXF4DP.js";
import "./chunk-JZ3YVIXN.js";
import {
  require_react
} from "./chunk-6CE3F7YD.js";
import {
  __commonJS,
  __toESM
} from "./chunk-TFWDKVI3.js";

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/bind.js"(exports, module) {
    "use strict";
    module.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i4 = 0; i4 < args.length; i4++) {
          args[i4] = arguments[i4];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/utils.js"(exports, module) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return toString.call(val) === "[object Array]";
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return typeof FormData !== "undefined" && val instanceof FormData;
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && val.buffer instanceof ArrayBuffer;
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i4 = 0, l3 = obj.length; i4 < l3; i4++) {
          fn.call(null, obj[i4], i4, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i4 = 0, l3 = arguments.length; i4 < l3; i4++) {
        forEach(arguments[i4], assignValue);
      }
      return result;
    }
    function extend(a2, b2, thisArg) {
      forEach(b2, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a2[key] = bind(val, thisArg);
        } else {
          a2[key] = val;
        }
      });
      return a2;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/buildURL.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v2) {
            if (utils.isDate(v2)) {
              v2 = v2.toISOString();
            } else if (utils.isObject(v2)) {
              v2 = JSON.stringify(v2);
            }
            parts.push(encode(key) + "=" + encode(v2));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/InterceptorManager.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h2) {
        if (h2 !== null) {
          fn(h2);
        }
      });
    };
    module.exports = InterceptorManager;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/enhanceError.js"(exports, module) {
    "use strict";
    module.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/createError.js"(exports, module) {
    "use strict";
    var enhanceError = require_enhanceError();
    module.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/settle.js"(exports, module) {
    "use strict";
    var createError = require_createError();
    module.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/cookies.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module) {
    "use strict";
    module.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/combineURLs.js"(exports, module) {
    "use strict";
    module.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/buildFullPath.js"(exports, module) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i4;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i4 = line.indexOf(":");
        key = utils.trim(line.substr(0, i4)).toLowerCase();
        val = utils.trim(line.substr(i4 + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/Cancel.js"(exports, module) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module.exports = Cancel;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/adapters/xhr.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    module.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || defaults.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/defaults.js
var require_defaults = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/defaults.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e2) {
          if (e2.name !== "SyntaxError") {
            throw e2;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e2) {
            if (strictJSONParsing) {
              if (e2.name === "SyntaxError") {
                throw enhanceError(e2, this, "E_JSON_PARSE");
              }
              throw e2;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module.exports = defaults;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/transformData.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/isCancel.js"(exports, module) {
    "use strict";
    module.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/dispatchRequest.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/mergeConfig.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/env/data.js"(exports, module) {
    module.exports = {
      "version": "0.24.0"
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/validator.js"(exports, module) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i4) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i4 < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i4 = keys.length;
      while (i4-- > 0) {
        var opt = keys[i4];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/core/Axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(config) {
      if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module.exports = Axios;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/cancel/CancelToken.js"(exports, module) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i4;
        var l3 = token._listeners.length;
        for (i4 = 0; i4 < l3; i4++) {
          token._listeners[i4](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c3) {
        cancel = c3;
      });
      return {
        token,
        cancel
      };
    };
    module.exports = CancelToken;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/spread.js"(exports, module) {
    "use strict";
    module.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module) {
    "use strict";
    module.exports = function isAxiosError(payload) {
      return typeof payload === "object" && payload.isAxiosError === true;
    };
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/lib/axios.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module.exports = axios;
    module.exports.default = axios;
  }
});

// node_modules/@medusajs/medusa-js/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/@medusajs/medusa-js/node_modules/axios/index.js"(exports, module) {
    module.exports = require_axios();
  }
});

// node_modules/@medusajs/medusa-js/dist/index.mjs
var import_axios2 = __toESM(require_axios2(), 1);

// node_modules/@medusajs/medusa-js/node_modules/retry-axios/dist/index.module.js
var import_axios = __toESM(require_axios2());
function r(r2) {
  return (r2 = r2 || import_axios.default).interceptors.response.use(n, s);
}
function n(e2) {
  return e2;
}
function o(e2) {
  var r2 = [];
  if (e2)
    return Array.isArray(e2) ? e2 : ("object" == typeof e2 && Object.keys(e2).forEach(function(t) {
      "number" == typeof t && (r2[t] = e2[t]);
    }), r2);
}
function s(r2) {
  if (import_axios.default.isCancel(r2))
    return Promise.reject(r2);
  var t = i(r2) || {};
  if (t.currentRetryAttempt = t.currentRetryAttempt || 0, t.retry = "number" == typeof t.retry ? t.retry : 3, t.retryDelay = "number" == typeof t.retryDelay ? t.retryDelay : 100, t.instance = t.instance || import_axios.default, t.backoffType = t.backoffType || "exponential", t.httpMethodsToRetry = o(t.httpMethodsToRetry) || ["GET", "HEAD", "PUT", "OPTIONS", "DELETE"], t.noResponseRetries = "number" == typeof t.noResponseRetries ? t.noResponseRetries : 2, t.checkRetryAfter = "boolean" != typeof t.checkRetryAfter || t.checkRetryAfter, t.maxRetryAfter = "number" == typeof t.maxRetryAfter ? t.maxRetryAfter : 3e5, t.statusCodesToRetry = o(t.statusCodesToRetry) || [[100, 199], [429, 429], [500, 599]], r2.config = r2.config || {}, r2.config.raxConfig = Object.assign({}, t), !(t.shouldRetry || f)(r2))
    return Promise.reject(r2);
  var n3 = new Promise(function(e2, n4) {
    var o2 = 0;
    if (t.checkRetryAfter && r2.response && r2.response.headers["retry-after"]) {
      var s3 = function(e3) {
        var r3 = Number(e3);
        if (!Number.isNaN(r3))
          return 1e3 * r3;
        var t2 = Date.parse(e3);
        return Number.isNaN(t2) ? void 0 : t2 - Date.now();
      }(r2.response.headers["retry-after"]);
      if (!(s3 && s3 > 0 && s3 <= t.maxRetryAfter))
        return n4(r2);
      o2 = s3;
    }
    r2.config.raxConfig.currentRetryAttempt += 1;
    var f4 = r2.config.raxConfig.currentRetryAttempt;
    0 === o2 && (o2 = "linear" === t.backoffType ? 1e3 * f4 : "static" === t.backoffType ? t.retryDelay : (Math.pow(2, f4) - 1) / 2 * 1e3, "number" == typeof t.maxRetryDelay && (o2 = Math.min(o2, t.maxRetryDelay))), setTimeout(e2, o2);
  }), s2 = t.onRetryAttempt ? Promise.resolve(t.onRetryAttempt(r2)) : Promise.resolve();
  return Promise.resolve().then(function() {
    return n3;
  }).then(function() {
    return s2;
  }).then(function() {
    return t.instance.request(r2.config);
  });
}
function f(e2) {
  var r2 = e2.config.raxConfig;
  if (!r2 || 0 === r2.retry)
    return false;
  if (!e2.response && (r2.currentRetryAttempt || 0) >= r2.noResponseRetries)
    return false;
  if (!e2.config.method || r2.httpMethodsToRetry.indexOf(e2.config.method.toUpperCase()) < 0)
    return false;
  if (e2.response && e2.response.status) {
    for (var t = false, n3 = 0, o2 = r2.statusCodesToRetry; n3 < o2.length; n3 += 1) {
      var s2 = o2[n3], f4 = e2.response.status;
      if (f4 >= s2[0] && f4 <= s2[1]) {
        t = true;
        break;
      }
    }
    if (!t)
      return false;
  }
  return r2.currentRetryAttempt = r2.currentRetryAttempt || 0, !(r2.currentRetryAttempt >= r2.retry);
}
function i(e2) {
  if (e2 && e2.config)
    return e2.config.raxConfig;
}

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i4 = 0; i4 < 256; ++i4) {
  byteToHex.push((i4 + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v2;
  const arr = new Uint8Array(16);
  arr[0] = (v2 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v2 >>> 16 & 255;
  arr[2] = v2 >>> 8 & 255;
  arr[3] = v2 & 255;
  arr[4] = (v2 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v2 & 255;
  arr[6] = (v2 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v2 & 255;
  arr[8] = (v2 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v2 & 255;
  arr[10] = (v2 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v2 / 4294967296 & 255;
  arr[12] = v2 >>> 24 & 255;
  arr[13] = v2 >>> 16 & 255;
  arr[14] = v2 >>> 8 & 255;
  arr[15] = v2 & 255;
  return arr;
}
var parse_default = parse;

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i4 = 0; i4 < str.length; ++i4) {
    bytes.push(str.charCodeAt(i4));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    var _namespace;
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i4 = 0; i4 < 16; ++i4) {
        buf[offset + i4] = bytes[i4];
      }
      return buf;
    }
    return unsafeStringify(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (let i4 = 0; i4 < msg.length; ++i4) {
      bytes[i4] = msg.charCodeAt(i4);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  const output = [];
  const length32 = input.length * 32;
  const hexTab = "0123456789abcdef";
  for (let i4 = 0; i4 < length32; i4 += 8) {
    const x2 = input[i4 >> 5] >>> i4 % 32 & 255;
    const hex = parseInt(hexTab.charAt(x2 >>> 4 & 15) + hexTab.charAt(x2 & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x2, len) {
  x2[len >> 5] |= 128 << len % 32;
  x2[getOutputLength(len) - 1] = len;
  let a2 = 1732584193;
  let b2 = -271733879;
  let c3 = -1732584194;
  let d2 = 271733878;
  for (let i4 = 0; i4 < x2.length; i4 += 16) {
    const olda = a2;
    const oldb = b2;
    const oldc = c3;
    const oldd = d2;
    a2 = md5ff(a2, b2, c3, d2, x2[i4], 7, -680876936);
    d2 = md5ff(d2, a2, b2, c3, x2[i4 + 1], 12, -389564586);
    c3 = md5ff(c3, d2, a2, b2, x2[i4 + 2], 17, 606105819);
    b2 = md5ff(b2, c3, d2, a2, x2[i4 + 3], 22, -1044525330);
    a2 = md5ff(a2, b2, c3, d2, x2[i4 + 4], 7, -176418897);
    d2 = md5ff(d2, a2, b2, c3, x2[i4 + 5], 12, 1200080426);
    c3 = md5ff(c3, d2, a2, b2, x2[i4 + 6], 17, -1473231341);
    b2 = md5ff(b2, c3, d2, a2, x2[i4 + 7], 22, -45705983);
    a2 = md5ff(a2, b2, c3, d2, x2[i4 + 8], 7, 1770035416);
    d2 = md5ff(d2, a2, b2, c3, x2[i4 + 9], 12, -1958414417);
    c3 = md5ff(c3, d2, a2, b2, x2[i4 + 10], 17, -42063);
    b2 = md5ff(b2, c3, d2, a2, x2[i4 + 11], 22, -1990404162);
    a2 = md5ff(a2, b2, c3, d2, x2[i4 + 12], 7, 1804603682);
    d2 = md5ff(d2, a2, b2, c3, x2[i4 + 13], 12, -40341101);
    c3 = md5ff(c3, d2, a2, b2, x2[i4 + 14], 17, -1502002290);
    b2 = md5ff(b2, c3, d2, a2, x2[i4 + 15], 22, 1236535329);
    a2 = md5gg(a2, b2, c3, d2, x2[i4 + 1], 5, -165796510);
    d2 = md5gg(d2, a2, b2, c3, x2[i4 + 6], 9, -1069501632);
    c3 = md5gg(c3, d2, a2, b2, x2[i4 + 11], 14, 643717713);
    b2 = md5gg(b2, c3, d2, a2, x2[i4], 20, -373897302);
    a2 = md5gg(a2, b2, c3, d2, x2[i4 + 5], 5, -701558691);
    d2 = md5gg(d2, a2, b2, c3, x2[i4 + 10], 9, 38016083);
    c3 = md5gg(c3, d2, a2, b2, x2[i4 + 15], 14, -660478335);
    b2 = md5gg(b2, c3, d2, a2, x2[i4 + 4], 20, -405537848);
    a2 = md5gg(a2, b2, c3, d2, x2[i4 + 9], 5, 568446438);
    d2 = md5gg(d2, a2, b2, c3, x2[i4 + 14], 9, -1019803690);
    c3 = md5gg(c3, d2, a2, b2, x2[i4 + 3], 14, -187363961);
    b2 = md5gg(b2, c3, d2, a2, x2[i4 + 8], 20, 1163531501);
    a2 = md5gg(a2, b2, c3, d2, x2[i4 + 13], 5, -1444681467);
    d2 = md5gg(d2, a2, b2, c3, x2[i4 + 2], 9, -51403784);
    c3 = md5gg(c3, d2, a2, b2, x2[i4 + 7], 14, 1735328473);
    b2 = md5gg(b2, c3, d2, a2, x2[i4 + 12], 20, -1926607734);
    a2 = md5hh(a2, b2, c3, d2, x2[i4 + 5], 4, -378558);
    d2 = md5hh(d2, a2, b2, c3, x2[i4 + 8], 11, -2022574463);
    c3 = md5hh(c3, d2, a2, b2, x2[i4 + 11], 16, 1839030562);
    b2 = md5hh(b2, c3, d2, a2, x2[i4 + 14], 23, -35309556);
    a2 = md5hh(a2, b2, c3, d2, x2[i4 + 1], 4, -1530992060);
    d2 = md5hh(d2, a2, b2, c3, x2[i4 + 4], 11, 1272893353);
    c3 = md5hh(c3, d2, a2, b2, x2[i4 + 7], 16, -155497632);
    b2 = md5hh(b2, c3, d2, a2, x2[i4 + 10], 23, -1094730640);
    a2 = md5hh(a2, b2, c3, d2, x2[i4 + 13], 4, 681279174);
    d2 = md5hh(d2, a2, b2, c3, x2[i4], 11, -358537222);
    c3 = md5hh(c3, d2, a2, b2, x2[i4 + 3], 16, -722521979);
    b2 = md5hh(b2, c3, d2, a2, x2[i4 + 6], 23, 76029189);
    a2 = md5hh(a2, b2, c3, d2, x2[i4 + 9], 4, -640364487);
    d2 = md5hh(d2, a2, b2, c3, x2[i4 + 12], 11, -421815835);
    c3 = md5hh(c3, d2, a2, b2, x2[i4 + 15], 16, 530742520);
    b2 = md5hh(b2, c3, d2, a2, x2[i4 + 2], 23, -995338651);
    a2 = md5ii(a2, b2, c3, d2, x2[i4], 6, -198630844);
    d2 = md5ii(d2, a2, b2, c3, x2[i4 + 7], 10, 1126891415);
    c3 = md5ii(c3, d2, a2, b2, x2[i4 + 14], 15, -1416354905);
    b2 = md5ii(b2, c3, d2, a2, x2[i4 + 5], 21, -57434055);
    a2 = md5ii(a2, b2, c3, d2, x2[i4 + 12], 6, 1700485571);
    d2 = md5ii(d2, a2, b2, c3, x2[i4 + 3], 10, -1894986606);
    c3 = md5ii(c3, d2, a2, b2, x2[i4 + 10], 15, -1051523);
    b2 = md5ii(b2, c3, d2, a2, x2[i4 + 1], 21, -2054922799);
    a2 = md5ii(a2, b2, c3, d2, x2[i4 + 8], 6, 1873313359);
    d2 = md5ii(d2, a2, b2, c3, x2[i4 + 15], 10, -30611744);
    c3 = md5ii(c3, d2, a2, b2, x2[i4 + 6], 15, -1560198380);
    b2 = md5ii(b2, c3, d2, a2, x2[i4 + 13], 21, 1309151649);
    a2 = md5ii(a2, b2, c3, d2, x2[i4 + 4], 6, -145523070);
    d2 = md5ii(d2, a2, b2, c3, x2[i4 + 11], 10, -1120210379);
    c3 = md5ii(c3, d2, a2, b2, x2[i4 + 2], 15, 718787259);
    b2 = md5ii(b2, c3, d2, a2, x2[i4 + 9], 21, -343485551);
    a2 = safeAdd(a2, olda);
    b2 = safeAdd(b2, oldb);
    c3 = safeAdd(c3, oldc);
    d2 = safeAdd(d2, oldd);
  }
  return [a2, b2, c3, d2];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  const length8 = input.length * 8;
  const output = new Uint32Array(getOutputLength(length8));
  for (let i4 = 0; i4 < length8; i4 += 8) {
    output[i4 >> 5] |= (input[i4 / 8] & 255) << i4 % 32;
  }
  return output;
}
function safeAdd(x2, y3) {
  const lsw = (x2 & 65535) + (y3 & 65535);
  const msw = (x2 >> 16) + (y3 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q2, a2, b2, x2, s2, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a2, q2), safeAdd(x2, t)), s2), b2);
}
function md5ff(a2, b2, c3, d2, x2, s2, t) {
  return md5cmn(b2 & c3 | ~b2 & d2, a2, b2, x2, s2, t);
}
function md5gg(a2, b2, c3, d2, x2, s2, t) {
  return md5cmn(b2 & d2 | c3 & ~d2, a2, b2, x2, s2, t);
}
function md5hh(a2, b2, c3, d2, x2, s2, t) {
  return md5cmn(b2 ^ c3 ^ d2, a2, b2, x2, s2, t);
}
function md5ii(a2, b2, c3, d2, x2, s2, t) {
  return md5cmn(c3 ^ (b2 | ~d2), a2, b2, x2, s2, t);
}
var md5_default = md5;

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35("v3", 48, md5_default);

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i4 = 0; i4 < 16; ++i4) {
      buf[offset + i4] = rnds[i4];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/sha1.js
function f2(s2, x2, y3, z2) {
  switch (s2) {
    case 0:
      return x2 & y3 ^ ~x2 & z2;
    case 1:
      return x2 ^ y3 ^ z2;
    case 2:
      return x2 & y3 ^ x2 & z2 ^ y3 & z2;
    case 3:
      return x2 ^ y3 ^ z2;
  }
}
function ROTL(x2, n3) {
  return x2 << n3 | x2 >>> 32 - n3;
}
function sha1(bytes) {
  const K3 = [1518500249, 1859775393, 2400959708, 3395469782];
  const H2 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    const msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (let i4 = 0; i4 < msg.length; ++i4) {
      bytes.push(msg.charCodeAt(i4));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  const l3 = bytes.length / 4 + 2;
  const N2 = Math.ceil(l3 / 16);
  const M3 = new Array(N2);
  for (let i4 = 0; i4 < N2; ++i4) {
    const arr = new Uint32Array(16);
    for (let j3 = 0; j3 < 16; ++j3) {
      arr[j3] = bytes[i4 * 64 + j3 * 4] << 24 | bytes[i4 * 64 + j3 * 4 + 1] << 16 | bytes[i4 * 64 + j3 * 4 + 2] << 8 | bytes[i4 * 64 + j3 * 4 + 3];
    }
    M3[i4] = arr;
  }
  M3[N2 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M3[N2 - 1][14] = Math.floor(M3[N2 - 1][14]);
  M3[N2 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i4 = 0; i4 < N2; ++i4) {
    const W3 = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W3[t] = M3[i4][t];
    }
    for (let t = 16; t < 80; ++t) {
      W3[t] = ROTL(W3[t - 3] ^ W3[t - 8] ^ W3[t - 14] ^ W3[t - 16], 1);
    }
    let a2 = H2[0];
    let b2 = H2[1];
    let c3 = H2[2];
    let d2 = H2[3];
    let e2 = H2[4];
    for (let t = 0; t < 80; ++t) {
      const s2 = Math.floor(t / 20);
      const T2 = ROTL(a2, 5) + f2(s2, b2, c3, d2) + e2 + K3[s2] + W3[t] >>> 0;
      e2 = d2;
      d2 = c3;
      c3 = ROTL(b2, 30) >>> 0;
      b2 = a2;
      a2 = T2;
    }
    H2[0] = H2[0] + a2 >>> 0;
    H2[1] = H2[1] + b2 >>> 0;
    H2[2] = H2[2] + c3 >>> 0;
    H2[3] = H2[3] + d2 >>> 0;
    H2[4] = H2[4] + e2 >>> 0;
  }
  return [H2[0] >> 24 & 255, H2[0] >> 16 & 255, H2[0] >> 8 & 255, H2[0] & 255, H2[1] >> 24 & 255, H2[1] >> 16 & 255, H2[1] >> 8 & 255, H2[1] & 255, H2[2] >> 24 & 255, H2[2] >> 16 & 255, H2[2] >> 8 & 255, H2[2] & 255, H2[3] >> 24 & 255, H2[3] >> 16 & 255, H2[3] >> 8 & 255, H2[3] & 255, H2[4] >> 24 & 255, H2[4] >> 16 & 255, H2[4] >> 8 & 255, H2[4] & 255];
}
var sha1_default = sha1;

// node_modules/@medusajs/medusa-js/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35("v5", 80, sha1_default);

// node_modules/@medusajs/medusa-js/dist/index.mjs
var import_qs = __toESM(require_lib(), 1);
var import_qs2 = __toESM(require_lib(), 1);
var import_qs3 = __toESM(require_lib(), 1);
var import_qs4 = __toESM(require_lib(), 1);
var import_qs5 = __toESM(require_lib(), 1);
var import_qs6 = __toESM(require_lib(), 1);
var import_qs7 = __toESM(require_lib(), 1);
var import_qs8 = __toESM(require_lib(), 1);
var import_qs9 = __toESM(require_lib(), 1);
var import_qs10 = __toESM(require_lib(), 1);
var import_qs11 = __toESM(require_lib(), 1);
var import_qs12 = __toESM(require_lib(), 1);
var import_qs13 = __toESM(require_lib(), 1);
var import_qs14 = __toESM(require_lib(), 1);
var import_qs15 = __toESM(require_lib(), 1);
var import_qs16 = __toESM(require_lib(), 1);
var import_qs17 = __toESM(require_lib(), 1);
var import_qs18 = __toESM(require_lib(), 1);
var import_qs19 = __toESM(require_lib(), 1);
var import_qs20 = __toESM(require_lib(), 1);
var import_qs21 = __toESM(require_lib(), 1);
var import_qs22 = __toESM(require_lib(), 1);
var import_qs23 = __toESM(require_lib(), 1);
var import_qs24 = __toESM(require_lib(), 1);
var import_qs25 = __toESM(require_lib(), 1);
var import_qs26 = __toESM(require_lib(), 1);
var import_qs27 = __toESM(require_lib(), 1);
var import_qs28 = __toESM(require_lib(), 1);
var import_qs29 = __toESM(require_lib(), 1);
var import_qs30 = __toESM(require_lib(), 1);
var import_qs31 = __toESM(require_lib(), 1);
var import_qs32 = __toESM(require_lib(), 1);
var import_qs33 = __toESM(require_lib(), 1);
var import_qs34 = __toESM(require_lib(), 1);
var import_qs35 = __toESM(require_lib(), 1);
var import_qs36 = __toESM(require_lib(), 1);
var import_qs37 = __toESM(require_lib(), 1);
var import_qs38 = __toESM(require_lib(), 1);
var d = class extends Error {
  constructor() {
    super();
  }
  static factory(s2) {
    switch (s2) {
      case c.INVALID_REQUEST:
        return new g();
      case c.AUTHENTICATION:
        return new A();
      case c.API:
        return new f3();
      case c.PERMISSION:
        return new y();
      case c.CONNECTION:
        return new q();
    }
  }
};
var c = ((n3) => (n3[n3.INVALID_REQUEST = 0] = "INVALID_REQUEST", n3[n3.API = 1] = "API", n3[n3.AUTHENTICATION = 2] = "AUTHENTICATION", n3[n3.PERMISSION = 3] = "PERMISSION", n3[n3.CONNECTION = 4] = "CONNECTION", n3))(c || {});
var g = class extends d {
};
var f3 = class extends d {
};
var A = class extends d {
};
var y = class extends d {
};
var q = class extends d {
};
var S = class {
  constructor() {
    this.publishableApiKey = null;
  }
  registerPublishableApiKey(s2) {
    this.publishableApiKey = s2;
  }
  getPublishableApiKey() {
    return this.publishableApiKey;
  }
};
var p = new S();
var Vs = { "/admin/auth": "POST", "/admin/users/password-token": "POST", "/admin/users/reset-password": "POST", "/admin/invites/accept": "POST" };
var Qe = { maxRetries: 0, baseUrl: "http://localhost:9000" };
var C = class {
  constructor(s2) {
    this.axiosClient = this.createClient({ ...Qe, ...s2 }), this.config = { ...Qe, ...s2 };
  }
  shouldRetryCondition(s2, e2, t) {
    return e2 >= t ? false : !s2.response || s2.response.status === 409 || s2.response.status > 500 && s2.response.status <= 599;
  }
  normalizeHeaders(s2) {
    return s2 && typeof s2 == "object" ? Object.keys(s2).reduce((e2, t) => (e2[this.normalizeHeader(t)] = s2[t], e2), {}) : s2;
  }
  normalizeHeader(s2) {
    return s2.split("-").map((e2) => e2.charAt(0).toUpperCase() + e2.substr(1).toLowerCase()).join("-");
  }
  requiresAuthentication(s2, e2) {
    return s2.startsWith("/admin") && Vs[s2] !== e2;
  }
  setHeaders(s2, e2, t, r2 = {}) {
    let n3 = { Accept: "application/json", "Content-Type": "application/json" };
    this.config.apiKey && this.requiresAuthentication(t, e2) && (n3 = { ...n3, Authorization: `Bearer ${this.config.apiKey}` });
    let a2 = this.config.publishableApiKey || p.getPublishableApiKey();
    return a2 && (n3["x-publishable-api-key"] = a2), this.config.maxRetries > 0 && e2 === "POST" && (n3["Idempotency-Key"] = v4_default()), Object.assign({}, n3, this.normalizeHeaders(s2), r2);
  }
  createClient(s2) {
    let e2 = import_axios2.default.create({ baseURL: s2.baseUrl });
    return r(e2), e2.defaults.raxConfig = { instance: e2, retry: s2.maxRetries, backoffType: "exponential", shouldRetry: (t) => {
      let r2 = i(t);
      return r2 ? this.shouldRetryCondition(t, r2.currentRetryAttempt ?? 1, r2.retry ?? 3) : false;
    } }, e2;
  }
  async request(s2, e2, t = {}, r2 = {}, n3 = {}) {
    let a2 = { method: s2, withCredentials: true, url: e2, json: true, headers: this.setHeaders(r2, s2, e2, n3) };
    ["POST", "DELETE"].includes(s2) && (a2.data = t);
    let { data: u2, ...Us2 } = await this.axiosClient(a2);
    return { ...u2, response: Us2 };
  }
};
var T = C;
var i2 = class {
  constructor(s2) {
    this.client = s2;
  }
};
var O = class extends i2 {
  addAddress(s2, e2 = {}) {
    let t = "/store/customers/me/addresses";
    return this.client.request("POST", t, s2, {}, e2);
  }
  deleteAddress(s2, e2 = {}) {
    let t = `/store/customers/me/addresses/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  updateAddress(s2, e2, t = {}) {
    let r2 = `/store/customers/me/addresses/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var $ = O;
var E = class extends i2 {
  authenticate(s2, e2 = {}) {
    let t = "/store/auth";
    return this.client.request("POST", t, s2, {}, e2);
  }
  deleteSession(s2 = {}) {
    let e2 = "/store/auth";
    return this.client.request("DELETE", e2, {}, {}, s2);
  }
  getSession(s2 = {}) {
    let e2 = "/store/auth";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  exists(s2, e2 = {}) {
    let t = `/store/auth/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var x = E;
var G = class extends i2 {
  create(s2, e2, t = {}) {
    let r2 = `/store/carts/${s2}/line-items`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  update(s2, e2, t, r2 = {}) {
    let n3 = `/store/carts/${s2}/line-items/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  delete(s2, e2, t = {}) {
    let r2 = `/store/carts/${s2}/line-items/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var D = G;
var L = class extends i2 {
  constructor() {
    super(...arguments);
    this.lineItems = new D(this.client);
  }
  addShippingMethod(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/shipping-methods`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  complete(e2, t = {}) {
    let r2 = `/store/carts/${e2}/complete`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  create(e2, t = {}) {
    let r2 = "/store/carts";
    return this.client.request("POST", r2, e2, {}, t);
  }
  createPaymentSessions(e2, t = {}) {
    let r2 = `/store/carts/${e2}/payment-sessions`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  deleteDiscount(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/discounts/${t}`;
    return this.client.request("DELETE", n3, void 0, {}, r2);
  }
  deletePaymentSession(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/payment-sessions/${t}`;
    return this.client.request("DELETE", n3, void 0, {}, r2);
  }
  refreshPaymentSession(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/payment-sessions/${t}/refresh`;
    return this.client.request("POST", n3, void 0, {}, r2);
  }
  retrieve(e2, t = {}) {
    let r2 = `/store/carts/${e2}`;
    return this.client.request("GET", r2, void 0, {}, t);
  }
  setPaymentSession(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}/payment-session`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  update(e2, t, r2 = {}) {
    let n3 = `/store/carts/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  updatePaymentSession(e2, t, r2, n3 = {}) {
    let a2 = `/store/carts/${e2}/payment-sessions/${t}`;
    return this.client.request("POST", a2, r2, {}, n3);
  }
};
var b = L;
var w = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/collections/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/store/collections";
    return s2 && (t = `/store/collections?${import_qs.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var v = w;
var B = class extends i2 {
  list(s2 = {}) {
    let e2 = "/store/customers/me/payment-methods";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var R = B;
var I = class extends i2 {
  constructor() {
    super(...arguments);
    this.paymentMethods = new R(this.client);
    this.addresses = new $(this.client);
  }
  create(e2, t = {}) {
    let r2 = "/store/customers";
    return this.client.request("POST", r2, e2, {}, t);
  }
  retrieve(e2 = {}) {
    let t = "/store/customers/me";
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(e2, t = {}) {
    let r2 = "/store/customers/me";
    return this.client.request("POST", r2, e2, {}, t);
  }
  listOrders(e2, t = {}) {
    let r2 = "/store/customers/me/orders";
    if (e2) {
      let n3 = import_qs2.default.stringify(e2);
      n3 && (r2 += `?${n3}`);
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  resetPassword(e2, t = {}) {
    let r2 = "/store/customers/password-reset";
    return this.client.request("POST", r2, e2, {}, t);
  }
  generatePasswordToken(e2, t = {}) {
    let r2 = "/store/customers/password-token";
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var k = I;
var U = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/gift-cards/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var K = U;
var N = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/order-edits/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  decline(s2, e2, t = {}) {
    let r2 = `/store/order-edits/${s2}/decline`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  complete(s2, e2 = {}) {
    let t = `/store/order-edits/${s2}/complete`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
};
var V = N;
var F = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/orders/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  retrieveByCartId(s2, e2 = {}) {
    let t = `/store/orders/cart/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  lookupOrder(s2, e2 = {}) {
    let t = "/store/orders?";
    return t = `/store/orders?${import_qs3.default.stringify(s2)}`, this.client.request("GET", t, s2, {}, e2);
  }
  requestCustomerOrders(s2, e2 = {}) {
    let t = "/store/orders/batch/customer/token";
    return this.client.request("POST", t, s2, {}, e2);
  }
  confirmRequest(s2, e2 = {}) {
    let t = "/store/orders/customer/confirm";
    return this.client.request("POST", t, s2, {}, e2);
  }
};
var M = F;
var z = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}`;
    if (e2) {
      let n3 = import_qs4.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  authorizePaymentSession(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/${e2}/authorize`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  authorizePaymentSessionsBatch(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/batch/authorize`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  managePaymentSessionsBatch(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  managePaymentSession(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  refreshPaymentSession(s2, e2, t = {}) {
    let r2 = `/store/payment-collections/${s2}/sessions/${e2}`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
};
var H = z;
var j = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/store/product-categories/${s2}`;
    if (e2) {
      let n3 = import_qs5.default.stringify(e2);
      r2 = `${r2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/store/product-categories";
    if (s2) {
      let r2 = import_qs5.default.stringify(s2);
      t = `${t}?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var J = j;
var _ = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/store/product-tags";
    if (s2) {
      let r2 = import_qs6.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Q = _;
var W = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/store/product-types";
    if (s2) {
      let r2 = import_qs7.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var X = W;
var Y = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/variants/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/store/variants";
    if (s2) {
      let r2 = import_qs9.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Xe = Y;
var Z = class extends i2 {
  constructor() {
    super(...arguments);
    this.variants = new Xe(this.client);
  }
  retrieve(e2, t = {}) {
    let r2 = `/store/products/${e2}`;
    return this.client.request("GET", r2, void 0, {}, t);
  }
  search(e2, t = {}) {
    let r2 = "/store/products/search";
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(e2, t = {}) {
    let r2 = "/store/products";
    return e2 && (r2 = `/store/products?${import_qs8.default.stringify(e2)}`), this.client.request("GET", r2, void 0, {}, t);
  }
};
var ee = Z;
var se = class extends i2 {
  list(s2 = {}) {
    let e2 = "/store/regions";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/store/regions/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var te = se;
var re = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/store/return-reasons/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/store/return-reasons";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var ne = re;
var ie = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/store/returns";
    return this.client.request("POST", t, s2, {}, e2);
  }
};
var oe = ie;
var ae = class extends i2 {
  listCartOptions(s2, e2 = {}) {
    let t = `/store/shipping-options/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/store/shipping-options";
    return s2 && (t = `/store/shipping-options?${import_qs10.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var de = ae;
var me = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/store/swaps";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieveByCartId(s2, e2 = {}) {
    let t = `/store/swaps/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var ce = me;
var ue = class extends i2 {
  getSession(s2 = {}) {
    let e2 = "/admin/auth";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  deleteSession(s2 = {}) {
    let e2 = "/admin/auth";
    return this.client.request("DELETE", e2, void 0, {}, s2);
  }
  createSession(s2, e2 = {}) {
    let t = "/admin/auth";
    return this.client.request("POST", t, s2, {}, e2);
  }
};
var Ye = ue;
function Ze(o2) {
  let s2 = (e2) => {
    let t = {};
    return Object.keys(e2).reduce((r2, n3) => (e2[n3] === null ? r2[n3] = "null" : typeof e2[n3] == "object" ? r2[n3] = s2(e2[n3]) : r2[n3] = e2[n3], r2), t), t;
  };
  return s2(o2);
}
var pe = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/batch-jobs";
    return this.client.request("POST", t, s2, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/batch-jobs";
    return s2 && (t = `/admin/batch-jobs?${import_qs11.default.stringify(Ze(s2))}`), this.client.request("GET", t, void 0, {}, e2);
  }
  cancel(s2, e2 = {}) {
    let t = `/admin/batch-jobs/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  confirm(s2, e2 = {}) {
    let t = `/admin/batch-jobs/${s2}/confirm`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/batch-jobs/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var es = pe;
var Re = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/collections";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/collections/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/collections/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/collections/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/collections";
    return s2 && (t = `/admin/collections?${import_qs12.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  addProducts(s2, e2, t = {}) {
    let r2 = `/admin/collections/${s2}/products/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  removeProducts(s2, e2, t = {}) {
    let r2 = `/admin/collections/${s2}/products/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
};
var ss = Re;
var le = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/currencies";
    if (s2) {
      let r2 = import_qs13.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/currencies/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var ts = le;
var he = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/customer-groups";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}`;
    if (e2) {
      let n3 = import_qs14.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/customer-groups/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/customer-groups";
    return s2 && (t = `/admin/customer-groups?${import_qs14.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  addCustomers(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}/customers/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  removeCustomers(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}/customers/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  listCustomers(s2, e2, t = {}) {
    let r2 = `/admin/customer-groups/${s2}/customers`;
    if (e2) {
      let n3 = import_qs14.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var rs = he;
var ge = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/customers";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/customers/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/customers/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/customers";
    return s2 && (t = `/admin/customers?${import_qs15.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var ns = ge;
var fe = class extends i2 {
  addRegion(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/regions/${e2}`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  create(s2, e2 = {}) {
    let t = "/admin/discounts";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  createDynamicCode(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/dynamic-codes`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/discounts/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  deleteDynamicCode(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/dynamic-codes/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/discounts/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  retrieveByCode(s2, e2 = {}) {
    let t = `/admin/discounts/code/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/discounts";
    if (s2) {
      let r2 = import_qs16.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  removeRegion(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/regions/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  createCondition(s2, e2, t = {}, r2 = {}) {
    let n3 = `/admin/discounts/${s2}/conditions`;
    if (t) {
      let a2 = import_qs16.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  updateCondition(s2, e2, t, r2 = {}, n3 = {}) {
    let a2 = `/admin/discounts/${s2}/conditions/${e2}`;
    if (r2) {
      let u2 = import_qs16.default.stringify(r2);
      a2 += `?${u2}`;
    }
    return this.client.request("POST", a2, t, {}, n3);
  }
  deleteCondition(s2, e2, t = {}) {
    let r2 = `/admin/discounts/${s2}/conditions/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  getCondition(s2, e2, t, r2 = {}) {
    let n3 = `/admin/discounts/${s2}/conditions/${e2}`;
    if (t) {
      let a2 = import_qs16.default.stringify(t);
      n3 += `?${a2}`;
    }
    return this.client.request("GET", n3, void 0, {}, r2);
  }
  addConditionResourceBatch(s2, e2, t, r2, n3 = {}) {
    let a2 = `/admin/discounts/${s2}/conditions/${e2}/batch`;
    if (r2) {
      let u2 = import_qs16.default.stringify(r2);
      a2 += `?${u2}`;
    }
    return this.client.request("POST", a2, t, {}, n3);
  }
  deleteConditionResourceBatch(s2, e2, t, r2 = {}) {
    let n3 = `/admin/discounts/${s2}/conditions/${e2}/batch`;
    return this.client.request("DELETE", n3, t, {}, r2);
  }
};
var is = fe;
var Ae = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/draft-orders";
    return this.client.request("POST", t, s2, {}, e2);
  }
  addLineItem(s2, e2, t = {}) {
    let r2 = `/admin/draft-orders/${s2}/line-items`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/draft-orders/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  removeLineItem(s2, e2, t = {}) {
    let r2 = `/admin/draft-orders/${s2}/line-items/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/draft-orders/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/draft-orders";
    return s2 && (t = `/admin/draft-orders?${import_qs17.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  markPaid(s2, e2 = {}) {
    let t = `/admin/draft-orders/${s2}/pay`;
    return this.client.request("POST", t, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/draft-orders/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  updateLineItem(s2, e2, t, r2 = {}) {
    let n3 = `/admin/draft-orders/${s2}/line-items/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
};
var os = Ae;
var ye = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/gift-cards";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/gift-cards/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/gift-cards/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/gift-cards/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/gift-cards/";
    return s2 && (t = `/admin/gift-cards?${import_qs18.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var as = ye;
var qe = class extends i2 {
  accept(s2, e2 = {}) {
    let t = "/admin/invites/accept";
    return this.client.request("POST", t, s2, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/invites";
    return this.client.request("POST", t, s2, {}, e2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/invites/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/invites";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  resend(s2, e2 = {}) {
    let t = `/admin/invites/${s2}`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
};
var ds = qe;
var Se = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/notes";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/notes/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/notes/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/notes/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/notes/";
    return s2 && (t = `/admin/notes?${import_qs19.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var ms = Se;
var Ce = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/notifications";
    return s2 && (t = `/admin/notifications?${import_qs20.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  resend(s2, e2, t = {}) {
    let r2 = `/admin/notifications/${s2}/resend`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var cs = Ce;
var Te = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}`;
    if (e2) {
      let n3 = import_qs21.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/order-edits";
    if (s2) {
      let r2 = import_qs21.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/order-edits";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  addLineItem(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}/items`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteItemChange(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}/changes/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  requestConfirmation(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}/request`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  cancel(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  confirm(s2, e2 = {}) {
    let t = `/admin/order-edits/${s2}/confirm`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  updateLineItem(s2, e2, t, r2 = {}) {
    let n3 = `/admin/order-edits/${s2}/items/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  removeLineItem(s2, e2, t = {}) {
    let r2 = `/admin/order-edits/${s2}/items/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var ps = Te;
var Oe = class extends i2 {
  update(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}`;
    if (e2) {
      let n3 = import_qs22.default.stringify(e2);
      r2 = `/admin/orders/${s2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/orders";
    return s2 && (t = `/admin/orders?${import_qs22.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  complete(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/complete`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  capturePayment(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/capture`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  refundPayment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/refund`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  createFulfillment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/fulfillment`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancelFulfillment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/fulfillments/${e2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  cancelSwapFulfillment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/swaps/${e2}/fulfillments/${t}/cancel`;
    return this.client.request("POST", n3, void 0, {}, r2);
  }
  cancelClaimFulfillment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}/fulfillments/${t}/cancel`;
    return this.client.request("POST", n3, void 0, {}, r2);
  }
  createShipment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/shipment`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  requestReturn(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/return`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancel(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  addShippingMethod(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/shipping-methods`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  archive(s2, e2 = {}) {
    let t = `/admin/orders/${s2}/archive`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  createSwap(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/swaps`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancelSwap(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/swaps/${e2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  fulfillSwap(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/swaps/${e2}/fulfillments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  createSwapShipment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/swaps/${e2}/shipments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  processSwapPayment(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/swaps/${e2}/process-payment`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  createClaim(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/claims`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  cancelClaim(s2, e2, t = {}) {
    let r2 = `/admin/orders/${s2}/claims/${e2}/cancel`;
    return this.client.request("POST", r2, void 0, {}, t);
  }
  updateClaim(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  fulfillClaim(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}/fulfillments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  createClaimShipment(s2, e2, t, r2 = {}) {
    let n3 = `/admin/orders/${s2}/claims/${e2}/shipments`;
    return this.client.request("POST", n3, t, {}, r2);
  }
};
var ls = Oe;
var $e = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/payment-collections/${s2}`;
    if (e2) {
      let n3 = import_qs23.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/payment-collections/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/payment-collections/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  markAsAuthorized(s2, e2 = {}) {
    let t = `/admin/payment-collections/${s2}/authorize`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
};
var Ps = $e;
var Ee = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/payments/${s2}`;
    if (e2) {
      let n3 = import_qs24.default.stringify(e2);
      r2 = `/admin/payments/${s2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  capturePayment(s2, e2 = {}) {
    let t = `/admin/payments/${s2}/capture`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  refundPayment(s2, e2, t = {}) {
    let r2 = `/admin/payments/${s2}/refund`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var hs = Ee;
var xe = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/price-lists";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/price-lists/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/price-lists/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/price-lists/";
    return s2 && (t = `/admin/price-lists?${import_qs25.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  listProducts(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/products`;
    if (e2) {
      let n3 = import_qs25.default.stringify(e2);
      r2 = `/admin/price-lists/${s2}/products?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  addPrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/prices/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deletePrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/prices/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  deleteProductPrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/products/${e2}/prices`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  deleteVariantPrices(s2, e2, t = {}) {
    let r2 = `/admin/price-lists/${s2}/variants/${e2}/prices`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var fs = xe;
var Ge = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}`;
    if (e2) {
      let n3 = import_qs26.default.stringify(e2);
      r2 = `${r2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  create(s2, e2 = {}) {
    let t = "/admin/product-categories";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/product-categories";
    if (s2) {
      let r2 = import_qs26.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/product-categories/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  removeProducts(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}/products/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  addProducts(s2, e2, t = {}) {
    let r2 = `/admin/product-categories/${s2}/products/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
};
var ys = Ge;
var De = class extends i2 {
  list(s2) {
    let e2 = "/admin/product-tags";
    return s2 && (e2 = `/admin/product-tags?${import_qs27.default.stringify(s2)}`), this.client.request("GET", e2);
  }
};
var qs = De;
var Le = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/product-types";
    if (s2) {
      let r2 = import_qs28.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Ss = Le;
var be = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/products/";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/products/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/products/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/products";
    return s2 && (t = `/admin/products?${import_qs29.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  listTypes(s2 = {}) {
    let e2 = "/admin/products/types";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  listTags(s2 = {}) {
    let e2 = "/admin/products/tag-usage";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  setMetadata(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/metadata`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  createVariant(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/variants`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  updateVariant(s2, e2, t, r2 = {}) {
    let n3 = `/admin/products/${s2}/variants/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  deleteVariant(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/variants/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  addOption(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/options`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  updateOption(s2, e2, t, r2 = {}) {
    let n3 = `/admin/products/${s2}/options/${e2}`;
    return this.client.request("POST", n3, t, {}, r2);
  }
  deleteOption(s2, e2, t = {}) {
    let r2 = `/admin/products/${s2}/options/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var Cs = be;
var ve = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}`;
    if (e2) {
      let n3 = import_qs30.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/publishable-api-keys";
    if (s2) {
      let r2 = import_qs30.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/publishable-api-keys";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/publishable-api-keys/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  revoke(s2, e2 = {}) {
    let t = `/admin/publishable-api-keys/${s2}/revoke`;
    return this.client.request("POST", t, {}, {}, e2);
  }
  addSalesChannelsBatch(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}/sales-channels/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteSalesChannelsBatch(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}/sales-channels/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  listSalesChannels(s2, e2, t = {}) {
    let r2 = `/admin/publishable-api-keys/${s2}/sales-channels`;
    if (e2) {
      let n3 = import_qs30.default.stringify(e2);
      r2 += `?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
};
var Ts = ve;
var Be = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/regions";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/regions/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/regions/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/regions";
    return s2 && (t = `/admin/regions?${import_qs31.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  addCountry(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/countries`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteCountry(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/countries/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  addFulfillmentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/fulfillment-providers`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deleteFulfillmentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/fulfillment-providers/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
  retrieveFulfillmentOptions(s2, e2 = {}) {
    let t = `/admin/regions/${s2}/fulfillment-options`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  addPaymentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/payment-providers`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  deletePaymentProvider(s2, e2, t = {}) {
    let r2 = `/admin/regions/${s2}/payment-providers/${e2}`;
    return this.client.request("DELETE", r2, void 0, {}, t);
  }
};
var Os = Be;
var Ie = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/return-reasons";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/return-reasons/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/return-reasons/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/return-reasons/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/return-reasons";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var $s = Ie;
var ke = class extends i2 {
  cancel(s2, e2 = {}) {
    let t = `/admin/returns/${s2}/cancel`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  receive(s2, e2, t = {}) {
    let r2 = `/admin/returns/${s2}/receive`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/returns/";
    return s2 && (t = `/admin/returns?${import_qs32.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var Es = ke;
var Ue = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/admin/sales-channels/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/sales-channels";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/sales-channels";
    if (s2) {
      let r2 = import_qs33.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/sales-channels/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  removeProducts(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/products/batch`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  addProducts(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/products/batch`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  addLocation(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/stock-locations`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  removeLocation(s2, e2, t = {}) {
    let r2 = `/admin/sales-channels/${s2}/stock-locations`;
    return this.client.request("DELETE", r2, e2, {}, t);
  }
};
var xs = Ue;
var Ke = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/shipping-options";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/shipping-options/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/shipping-options/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/shipping-options/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/shipping-options";
    return s2 && (t = `/admin/shipping-options?${import_qs34.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var Gs = Ke;
var Ne = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/shipping-profiles/";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/shipping-profiles/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/shipping-profiles/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/shipping-profiles/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/shipping-profiles/";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var Ds = Ne;
var Ve = class extends i2 {
  create(s2, e2 = {}) {
    let t = "/admin/stock-locations";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/stock-locations/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/stock-locations/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/stock-locations/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/stock-locations";
    if (s2) {
      let r2 = import_qs35.default.stringify(s2);
      t += `?${r2}`;
    }
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var Ls = Ve;
var Fe = class extends i2 {
  update(s2, e2 = {}) {
    let t = "/admin/store/";
    return this.client.request("POST", t, s2, {}, e2);
  }
  addCurrency(s2, e2 = {}) {
    let t = `/admin/store/${s2}`;
    return this.client.request("POST", t, void 0, {}, e2);
  }
  deleteCurrency(s2, e2 = {}) {
    let t = `/admin/store/currencies/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  retrieve(s2 = {}) {
    let e2 = "/admin/store/";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  listPaymentProviders(s2 = {}) {
    let e2 = "/admin/store/payment-providers";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
  listTaxProviders(s2 = {}) {
    let e2 = "/admin/store/tax-providers";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var bs = Fe;
var Me = class extends i2 {
  retrieve(s2, e2 = {}) {
    let t = `/admin/swaps/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  list(s2, e2 = {}) {
    let t = "/admin/swaps/";
    return s2 && (t = `/admin/swaps?${import_qs36.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
};
var ws = Me;
var ze = class extends i2 {
  retrieve(s2, e2, t = {}) {
    let r2 = `/admin/tax-rates/${s2}`;
    if (e2) {
      let n3 = import_qs37.default.stringify(e2);
      r2 = `/admin/tax-rates/${s2}?${n3}`;
    }
    return this.client.request("GET", r2, void 0, {}, t);
  }
  list(s2, e2 = {}) {
    let t = "/admin/tax-rates";
    return s2 && (t = `/admin/tax-rates?${import_qs37.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2, t = {}) {
    let r2 = "/admin/tax-rates";
    return e2 && (r2 = `/admin/tax-rates?${import_qs37.default.stringify(e2)}`), this.client.request("POST", r2, s2, {}, t);
  }
  update(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  addProducts(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/products/batch`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/products/batch?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  addProductTypes(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/product-types/batch`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/product-types/batch?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  addShippingOptions(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/shipping-options/batch`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/shipping-options/batch?${a2}`;
    }
    return this.client.request("POST", n3, e2, {}, r2);
  }
  removeProducts(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/products/batch`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/products/batch?${a2}`;
    }
    return this.client.request("DELETE", n3, e2, {}, r2);
  }
  removeProductTypes(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/product-types/batch`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/product-types/batch?${a2}`;
    }
    return this.client.request("DELETE", n3, e2, {}, r2);
  }
  removeShippingOptions(s2, e2, t, r2 = {}) {
    let n3 = `/admin/tax-rates/${s2}/shipping-options/batch`;
    if (t) {
      let a2 = import_qs37.default.stringify(t);
      n3 = `/admin/tax-rates/${s2}/shipping-options/batch?${a2}`;
    }
    return this.client.request("DELETE", n3, e2, {}, r2);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/tax-rates/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
};
var vs = ze;
var He = class extends i2 {
  constructor() {
    super(...arguments);
    this.headers = { "Content-Type": "multipart/form-data" };
  }
  create(e2) {
    let t = "/admin/uploads", r2 = this._createPayload(e2);
    return this.client.request("POST", t, r2, {}, this.headers);
  }
  createProtected(e2) {
    let t = "/admin/uploads/protected", r2 = this._createPayload(e2);
    return this.client.request("POST", t, r2, {}, this.headers);
  }
  delete(e2, t = {}) {
    let r2 = "/admin/uploads";
    return this.client.request("DELETE", r2, e2, {}, t);
  }
  getPresignedDownloadUrl(e2, t = {}) {
    let r2 = "/admin/uploads/download-url";
    return this.client.request("POST", r2, e2, {}, t);
  }
  _createPayload(e2) {
    let t = new FormData();
    return Array.isArray(e2) ? e2.forEach((r2) => t.append("files", r2)) : t.append("files", e2), t;
  }
};
var Bs = He;
var je = class extends i2 {
  sendResetPasswordToken(s2, e2 = {}) {
    let t = "/admin/users/password-token";
    return this.client.request("POST", t, s2, {}, e2);
  }
  resetPassword(s2, e2 = {}) {
    let t = "admin/users/reset-password";
    return this.client.request("POST", t, s2, {}, e2);
  }
  retrieve(s2, e2 = {}) {
    let t = `/admin/users/${s2}`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
  create(s2, e2 = {}) {
    let t = "/admin/users";
    return this.client.request("POST", t, s2, {}, e2);
  }
  update(s2, e2, t = {}) {
    let r2 = `/admin/users/${s2}`;
    return this.client.request("POST", r2, e2, {}, t);
  }
  delete(s2, e2 = {}) {
    let t = `/admin/users/${s2}`;
    return this.client.request("DELETE", t, void 0, {}, e2);
  }
  list(s2 = {}) {
    let e2 = "/admin/users";
    return this.client.request("GET", e2, void 0, {}, s2);
  }
};
var Is = je;
var Je = class extends i2 {
  list(s2, e2 = {}) {
    let t = "/admin/variants";
    return s2 && (t = `/admin/variants?${import_qs38.default.stringify(s2)}`), this.client.request("GET", t, void 0, {}, e2);
  }
  getInventory(s2, e2 = {}) {
    let t = `/admin/variants/${s2}/inventory`;
    return this.client.request("GET", t, void 0, {}, e2);
  }
};
var ks = Je;
var h = class extends i2 {
  constructor() {
    super(...arguments);
    this.auth = new Ye(this.client);
    this.batchJobs = new es(this.client);
    this.customers = new ns(this.client);
    this.customerGroups = new rs(this.client);
    this.discounts = new is(this.client);
    this.currencies = new ts(this.client);
    this.collections = new ss(this.client);
    this.draftOrders = new os(this.client);
    this.giftCards = new as(this.client);
    this.invites = new ds(this.client);
    this.notes = new ms(this.client);
    this.priceLists = new fs(this.client);
    this.products = new Cs(this.client);
    this.productTags = new qs(this.client);
    this.productTypes = new Ss(this.client);
    this.users = new Is(this.client);
    this.returns = new Es(this.client);
    this.orders = new ls(this.client);
    this.orderEdits = new ps(this.client);
    this.publishableApiKeys = new Ts(this.client);
    this.returnReasons = new $s(this.client);
    this.variants = new ks(this.client);
    this.salesChannels = new xs(this.client);
    this.swaps = new ws(this.client);
    this.shippingProfiles = new Ds(this.client);
    this.stockLocations = new Ls(this.client);
    this.store = new bs(this.client);
    this.shippingOptions = new Gs(this.client);
    this.regions = new Os(this.client);
    this.notifications = new cs(this.client);
    this.taxRates = new vs(this.client);
    this.uploads = new Bs(this.client);
    this.paymentCollections = new Ps(this.client);
    this.payments = new hs(this.client);
    this.productCategories = new ys(this.client);
  }
};
var _e = class {
  constructor(s2) {
    this.client = new T(s2), this.admin = new h(this.client), this.auth = new x(this.client), this.carts = new b(this.client), this.customers = new k(this.client), this.errors = new d(), this.orders = new M(this.client), this.orderEdits = new V(this.client), this.products = new ee(this.client), this.productTypes = new X(this.client), this.regions = new te(this.client), this.returnReasons = new ne(this.client), this.returns = new oe(this.client), this.shippingOptions = new de(this.client), this.swaps = new ce(this.client), this.collections = new v(this.client), this.giftCards = new K(this.client), this.paymentMethods = new R(this.client), this.paymentCollections = new H(this.client), this.productTags = new Q(this.client), this.productCategories = new J(this.client);
  }
  setPublishableKey(s2) {
    p.registerPublishableApiKey(s2);
  }
};
var vo = _e;

// node_modules/medusa-react/dist/index.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var Pt2 = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);
var yt = import_react.default.createContext(null);
var n2 = () => {
  let e2 = import_react.default.useContext(yt);
  if (!e2)
    throw new Error("useMedusa must be used within a MedusaProvider");
  return e2;
};
var so = ({ queryClientProviderProps: e2, baseUrl: t, apiKey: s2, publishableApiKey: r2, children: o2 }) => {
  let m2 = new vo({ baseUrl: t, maxRetries: 0, apiKey: s2, publishableApiKey: r2 });
  return import_react.default.createElement(QueryClientProvider, { ...e2 }, import_react.default.createElement(yt.Provider, { value: { client: m2 } }, o2));
};
var Ee2 = (e2) => e2 instanceof Object;
var ve2 = (e2) => Array.isArray(e2);
var te2 = (e2) => e2 == null || Ee2(e2) && Object.keys(e2).length === 0 || ve2(e2) && e2.length === 0 || typeof e2 == "string" && e2.trim().length === 0;
var io = ({ variant: e2, region: t, includeTaxes: s2 = true, ...r2 }) => {
  let o2 = Cs2({ variant: e2, region: t, includeTaxes: s2 });
  return ft({ amount: o2, currency_code: t == null ? void 0 : t.currency_code, ...r2 });
};
var Cs2 = ({ variant: e2, region: t, includeTaxes: s2 = true }) => {
  let r2 = Ie2(e2, t);
  return At({ amount: r2, region: t, includeTaxes: s2 });
};
var Ie2 = (e2, t) => {
  var _a, _b;
  return ((_b = (_a = e2 == null ? void 0 : e2.prices) == null ? void 0 : _a.find((r2) => {
    var _a2;
    return r2.currency_code.toLowerCase() === ((_a2 = t == null ? void 0 : t.currency_code) == null ? void 0 : _a2.toLowerCase());
  })) == null ? void 0 : _b.amount) || 0;
};
var At = ({ amount: e2, region: t, includeTaxes: s2 = true }) => {
  let r2 = xs2(e2, t), o2 = s2 ? gs2(t) : 0;
  return r2 * (1 + o2);
};
var ao = ({ amount: e2, region: t, includeTaxes: s2 = true, ...r2 }) => {
  let o2 = At({ amount: e2, region: t, includeTaxes: s2 });
  return ft({ amount: o2, currency_code: t.currency_code, ...r2 });
};
var Os2 = ["krw", "jpy", "vnd"];
var xs2 = (e2, t) => {
  var _a;
  let s2 = Os2.includes((_a = t == null ? void 0 : t.currency_code) == null ? void 0 : _a.toLowerCase()) ? 1 : 100;
  return Math.floor(e2) / s2;
};
var gs2 = (e2) => e2 && !te2(e2) ? (e2 == null ? void 0 : e2.tax_rate) / 100 : 0;
var ft = ({ amount: e2, currency_code: t, minimumFractionDigits: s2, maximumFractionDigits: r2, locale: o2 = "en-US" }) => t && !te2(t) ? new Intl.NumberFormat(o2, { style: "currency", currency: t, minimumFractionDigits: s2, maximumFractionDigits: r2 }).format(e2) : e2.toString();
var a = (e2) => {
  let t = { all: [e2], lists: () => [...t.all, "list"], list: (s2) => [...t.lists(), { query: s2 }], details: () => [...t.all, "detail"], detail: (s2) => [...t.details(), s2] };
  return t;
};
var Ct = (e2, t) => {
  let [s2, r2] = Pt2.useState(() => {
    try {
      return typeof window < "u" && window.localStorage.getItem(e2) || t;
    } catch {
      return t;
    }
  });
  return [s2, (x2) => {
    r2(x2), typeof window < "u" && window.localStorage.setItem(e2, x2);
  }, () => {
    typeof window < "u" && window.localStorage.removeItem(e2);
  }];
};
var Ot = import_react2.default.createContext(null);
var Us = (e2, t) => {
  switch (t.type) {
    case 0:
      return e2;
    case 6:
      return ce2({ ...e2, region: t.payload }, e2.items);
    case 1: {
      let s2 = e2.items.findIndex((o2) => {
        var _a, _b;
        return o2.variant.id === ((_b = (_a = t.payload) == null ? void 0 : _a.variant) == null ? void 0 : _b.id);
      });
      s2 !== -1 && e2.items.splice(s2, 1);
      let r2 = [...e2.items, t.payload];
      return ce2(e2, r2);
    }
    case 4: {
      let s2 = e2.items.map((r2) => r2.variant.id === t.payload.id ? { ...r2, ...t.payload.item } : r2);
      return ce2(e2, s2);
    }
    case 3: {
      let s2 = e2.items.filter((r2) => r2.variant.id !== t.payload.id);
      return ce2(e2, s2);
    }
    case 2:
      return ce2(e2, t.payload);
    case 5:
      return { ...e2, items: [], total: 0, totalItems: 0 };
    default:
      return e2;
  }
};
var ce2 = (e2, t) => {
  let s2 = qs2(e2.region, t);
  return { ...e2, items: s2, totalItems: t.reduce((r2, o2) => r2 + o2.quantity, 0), total: Ms2(s2) };
};
var qs2 = (e2, t) => t.map((s2) => ({ ...s2, total: Ie2(s2.variant, e2) }));
var Ms2 = (e2) => e2.reduce((t, s2) => t + s2.quantity * (s2.total || 0), 0);
var Ks2 = { region: {}, items: [], total: 0, totalItems: 0 };
var Co = ({ initialState: e2 = Ks2, children: t }) => {
  let [s2, r2] = Ct("medusa-session-cart", JSON.stringify(e2)), [o2, m2] = import_react2.default.useReducer(Us, JSON.parse(s2));
  (0, import_react2.useEffect)(() => {
    r2(JSON.stringify(o2));
  }, [o2, r2]);
  let x2 = (d2) => {
    if (!Ee2(d2) || te2(d2))
      throw new Error("region must be a non-empty object");
    m2({ type: 6, payload: d2 });
  }, ee2 = (d2) => o2.items.find((A2) => A2.variant.id === d2), Te2 = (d2) => {
    if (!ve2(d2))
      throw new Error("items must be an array of items");
    m2({ type: 2, payload: d2 });
  }, De2 = (d2) => {
    if (!Ee2(d2) || te2(d2))
      throw new Error("item must be a non-empty object");
    m2({ type: 1, payload: d2 });
  }, _e2 = (d2, A2) => {
    m2({ type: 4, payload: { id: d2, item: A2 } });
  }, f4 = (d2, A2) => {
    let be2 = ee2(d2);
    !be2 || (A2 = A2 <= 0 ? 1 : A2, m2({ type: 4, payload: { id: d2, item: { ...be2, quantity: Math.min(be2.variant.inventory_quantity, A2) } } }));
  }, Le2 = (d2) => {
    let A2 = ee2(d2);
    !A2 || m2({ type: 4, payload: { id: d2, item: { ...A2, quantity: Math.min(A2.variant.inventory_quantity, A2.quantity + 1) } } });
  }, Rs2 = (d2) => {
    let A2 = ee2(d2);
    !A2 || m2({ type: 4, payload: { id: d2, item: { ...A2, quantity: Math.max(0, A2.quantity - 1) } } });
  }, ys2 = (d2) => {
    m2({ type: 3, payload: { id: d2 } });
  }, As2 = () => {
    m2({ type: 5 });
  };
  return import_react2.default.createElement(Ot.Provider, { value: { ...o2, setRegion: x2, addItem: De2, updateItem: _e2, updateItemQuantity: f4, incrementItemQuantity: Le2, decrementItemQuantity: Rs2, removeItem: ys2, getItem: ee2, setItems: Te2, clearItems: As2 } }, t);
};
var Oo = () => {
  let e2 = (0, import_react2.useContext)(Ot);
  if (!e2)
    throw new Error("useSessionCart should be used as a child of SessionCartProvider");
  return e2;
};
var hs2 = "carts";
var Ts2 = a(hs2);
var Uo = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Ts2.detail(e2), () => s2.carts.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var xt = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.carts.create(s2), e2);
};
var gt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.update(e2, r2), t);
};
var Et = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(() => s2.carts.complete(e2), t);
};
var St = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(() => s2.carts.createPaymentSessions(e2), t);
};
var ho = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ data: r2, provider_id: o2 }) => s2.carts.updatePaymentSession(e2, o2, { data: r2 }), t);
};
var To = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ provider_id: r2 }) => s2.carts.refreshPaymentSession(e2, r2), t);
};
var Ut = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.setPaymentSession(e2, r2), t);
};
var qt = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.addShippingMethod(e2, r2), t);
};
var Do = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ provider_id: r2 }) => s2.carts.deletePaymentSession(e2, r2), t);
};
var _o = (e2) => {
  let { client: t } = n2();
  return useMutation(async (r2) => {
    let { cart: o2 } = await t.carts.create(r2);
    return (await t.carts.createPaymentSessions(o2.id)).cart;
  }, e2);
};
var Ds2 = "collections";
var Kt = a(Ds2);
var Yo = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Kt.detail(e2), () => s2.collections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var wo = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Kt.list(e2), () => s2.collections.list(e2), t);
  return { ...r2, ...o2 };
};
var _s2 = "customers";
var Ne2 = { ...a(_s2), orders: (e2) => [...Ne2.detail(e2), "orders"] };
var zo = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Ne2.detail("me"), () => t.customers.retrieve(), e2);
  return { ...s2, ...r2 };
};
var Ho = (e2 = { limit: 10, offset: 0 }, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Ne2.orders("me"), () => s2.customers.listOrders(e2), t);
  return { ...r2, ...o2 };
};
var tn = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.customers.create(s2), e2);
};
var sn = (e2) => {
  let { client: t } = n2();
  return useMutation(({ id: s2, ...r2 }) => t.customers.update(r2), e2);
};
var bs2 = "gift_cards";
var vs2 = a(bs2);
var un = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(vs2.detail(e2), () => s2.giftCards.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Pn = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation((r2) => s2.carts.lineItems.create(e2, r2), t);
};
var Cn = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ lineId: r2, ...o2 }) => s2.carts.lineItems.update(e2, r2, o2), t);
};
var On = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(({ lineId: r2 }) => s2.carts.lineItems.delete(e2, r2), t);
};
var Gs2 = "orderEdit";
var se2 = a(Gs2);
var Mn = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(se2.detail(e2), () => s2.orderEdits.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var i3 = (e2, t, s2) => ({ ...s2, onSuccess: (...r2) => {
  if (s2 == null ? void 0 : s2.onSuccess)
    return s2.onSuccess(...r2);
  t !== void 0 && t.forEach((o2) => {
    e2.invalidateQueries({ queryKey: o2 });
  });
} });
var bn = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.orderEdits.decline(e2, o2), i3(r2, [se2.lists(), se2.detail(e2)], t));
};
var vn = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.orderEdits.complete(e2), i3(r2, [se2.lists(), se2.detail(e2)], t));
};
var Ns = "orders";
var j2 = { ...a(Ns), cart: (e2) => [...j2.details(), "cart", e2] };
var Bn = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(j2.detail(e2), () => s2.orders.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Vn = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(j2.cart(e2), () => s2.orders.retrieveByCartId(e2), t);
  return { ...r2, ...o2 };
};
var Jn = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(j2.list(e2), () => s2.orders.lookupOrder(e2), t);
  return { ...r2, ...o2 };
};
var Zn = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.orders.requestCustomerOrders(r2), i3(s2, [j2.all], e2));
};
var ei = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.orders.confirmRequest(r2), i3(s2, [j2.all], e2));
};
var Ys2 = "paymentCollection";
var g2 = a(Ys2);
var mi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(g2.detail(e2), () => s2.paymentCollections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var yi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.managePaymentSessionsBatch(e2, o2), i3(r2, [g2.lists(), g2.detail(e2)], t));
};
var Ai = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.managePaymentSession(e2, o2), i3(r2, [g2.lists(), g2.detail(e2)], t));
};
var fi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.authorizePaymentSession(e2, o2), i3(r2, [g2.lists(), g2.detail(e2)], t));
};
var Pi = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.authorizePaymentSessionsBatch(e2, o2), i3(r2, [g2.lists(), g2.detail(e2)], t));
};
var Ci = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.paymentCollections.refreshPaymentSession(e2, o2), i3(r2, [g2.lists(), g2.detail(e2)], t));
};
var Fs2 = "product_tags";
var Bs2 = a(Fs2);
var Mi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Bs2.list(e2), () => s2.productTags.list(e2), t);
  return { ...r2, ...o2 };
};
var Js2 = "product_types";
var ks2 = a(Js2);
var Li = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(ks2.list(e2), () => s2.productTypes.list(e2), t);
  return { ...r2, ...o2 };
};
var js2 = "products";
var vt = a(js2);
var Yi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(vt.list(e2), () => s2.products.list(e2), t);
  return { ...r2, ...o2 };
};
var wi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(vt.detail(e2), () => s2.products.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var zs2 = "regions";
var Gt = a(zs2);
var zi = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Gt.lists(), () => t.regions.list(), e2);
  return { ...s2, ...r2 };
};
var Hi = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Gt.detail(e2), () => s2.regions.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Hs2 = "return_reasons";
var Wt = a(Hs2);
var ra = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Wt.lists(), () => t.returnReasons.list(), e2);
  return { ...s2, ...r2 };
};
var oa = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Wt.detail(e2), () => s2.returnReasons.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var ua = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.returns.create(s2), e2);
};
var $s2 = "shipping_options";
var we2 = { ...a($s2), cart: (e2) => [...we2.all, "cart", e2] };
var Pa = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(we2.list(e2), async () => s2.shippingOptions.list(e2), t);
  return { ...r2, ...o2 };
};
var Ca = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(we2.cart(e2), async () => s2.shippingOptions.listCartOptions(e2), t);
  return { ...r2, ...o2 };
};
var er = "swaps";
var wt = { ...a(er), cart: (e2) => [...wt.all, "cart", e2] };
var qa = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(wt.cart(e2), () => s2.swaps.retrieveByCartId(e2), t);
  return { ...r2, ...o2 };
};
var Ta = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.swaps.create(s2), e2);
};
var Ft = import_react3.default.createContext(null);
var tm = () => {
  let e2 = import_react3.default.useContext(Ft);
  if (!e2)
    throw new Error("useCart must be used within a CartProvider");
  return e2;
};
var rr = { id: "", items: [] };
var sm = ({ children: e2, initialState: t = rr }) => {
  let [s2, r2] = (0, import_react3.useState)(t), o2 = xt({ onSuccess: ({ cart: f4 }) => r2(f4) }), m2 = gt(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: f4 }) => r2(f4) }), x2 = qt(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: f4 }) => r2(f4) }), ee2 = St(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: f4 }) => r2(f4) }), Te2 = Ut(s2 == null ? void 0 : s2.id, { onSuccess: ({ cart: f4 }) => {
    r2(f4);
  } }), De2 = Et(s2 == null ? void 0 : s2.id), _e2 = s2 == null ? void 0 : s2.items.map((f4) => f4.quantity).reduce((f4, Le2) => f4 + Le2, 0);
  return import_react3.default.createElement(Ft.Provider, { value: { cart: s2, setCart: r2, createCart: o2, pay: Te2, startCheckout: ee2, completeCheckout: De2, updateCart: m2, addShippingMethod: x2, totalItems: _e2 || 0 } }, e2);
};
var nr = "admin_auth";
var Se2 = a(nr);
var um = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Se2.details(), () => t.admin.auth.getSession(), e2);
  return { ...s2, ...r2 };
};
var Pm = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.auth.createSession(r2), i3(s2, Se2.details(), e2));
};
var Cm = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation(() => t.admin.auth.deleteSession(), i3(s2, Se2.details(), e2));
};
var ir = "admin_batches";
var W2 = a(ir);
var Mm = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(W2.list(e2), () => s2.admin.batchJobs.list(e2), t);
  return { ...r2, ...o2 };
};
var Km = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(W2.detail(e2), () => s2.admin.batchJobs.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var bm = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.batchJobs.create(r2), i3(s2, W2.lists(), e2));
};
var vm = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.batchJobs.cancel(e2), i3(r2, [W2.lists(), W2.detail(e2)], t));
};
var Im = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.batchJobs.confirm(e2), i3(r2, [W2.lists(), W2.detail(e2)], t));
};
var ar = "admin_orders";
var p2 = { ...a(ar), detailOrder(e2, t) {
  return [...this.detail(e2), { ...t || {} }];
} };
var Vm = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(p2.list(e2), () => s2.admin.orders.list(e2), t);
  return { ...r2, ...o2 };
};
var Jm = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(p2.detailOrder(e2, t), () => r2.admin.orders.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var Zm = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createClaim(e2, o2), i3(r2, p2.detail(e2), t));
};
var ep = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, ...m2 }) => s2.admin.orders.updateClaim(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var tp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.cancelClaim(e2, o2), i3(r2, p2.detail(e2), t));
};
var sp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, ...m2 }) => s2.admin.orders.fulfillClaim(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var rp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, fulfillment_id: m2 }) => s2.admin.orders.cancelClaimFulfillment(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var op = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ claim_id: o2, ...m2 }) => s2.admin.orders.createClaimShipment(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var mr = "admin_collections";
var E2 = a(mr);
var up = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(E2.list(e2), () => s2.admin.collections.list(e2), t);
  return { ...r2, ...o2 };
};
var cp = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(E2.detail(e2), () => s2.admin.collections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Cp = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.collections.create(r2), i3(s2, E2.lists(), e2));
};
var Op = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.collections.update(e2, o2), i3(r2, [E2.lists(), E2.detail(e2)], t));
};
var xp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.collections.delete(e2), i3(r2, [E2.lists(), E2.detail(e2)], t));
};
var gp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.collections.addProducts(e2, o2), i3(r2, [E2.lists(), E2.detail(e2)], t));
};
var Ep = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.collections.removeProducts(e2, o2), i3(r2, [E2.lists(), E2.detail(e2)], t));
};
var dr = "admin_currencies";
var Ue2 = a(dr);
var Tp = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Ue2.list(e2), () => s2.admin.currencies.list(e2), t);
  return { ...r2, ...o2 };
};
var Gp = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.currencies.update(e2, o2), i3(r2, [Ue2.lists(), Ue2.detail(e2)], t));
};
var lr = "admin_customer_groups";
var O2 = { ...a(lr), detailCustomer(e2, t) {
  return [...this.detail(e2), "customers", { ...t || {} }];
} };
var Jp = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(O2.detail(e2), () => r2.admin.customerGroups.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var kp = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(O2.list(e2), () => s2.admin.customerGroups.list(e2), t);
  return { ...r2, ...o2 };
};
var jp = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(O2.detailCustomer(e2, t), () => r2.admin.customerGroups.listCustomers(e2, t), s2);
  return { ...o2, ...m2 };
};
var td = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.customerGroups.create(r2), i3(s2, O2.lists(), e2));
};
var sd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customerGroups.update(e2, o2), i3(r2, [O2.lists(), O2.detail(e2)], t));
};
var rd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.customerGroups.delete(e2), i3(r2, [O2.lists(), O2.detail(e2)], t));
};
var od = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customerGroups.addCustomers(e2, o2), i3(r2, [O2.lists(), O2.detailCustomer(e2)], t));
};
var nd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customerGroups.removeCustomers(e2, o2), i3(r2, [O2.lists(), O2.detailCustomer(e2)], t));
};
var Rr = "admin_customers";
var S2 = a(Rr);
var ld = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(S2.list(e2), () => s2.admin.customers.list(e2), t);
  return { ...r2, ...o2 };
};
var Rd = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(S2.detail(e2), () => s2.admin.customers.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var xd = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.customers.create(r2), i3(s2, S2.lists(), e2));
};
var gd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.customers.update(e2, o2), i3(r2, [S2.lists(), S2.detail(e2)], t));
};
var yr = "admin_discounts";
var R2 = { ...a(yr), detailCondition(e2, t) {
  return [...this.detail(e2), "condition", { ...t || {} }];
} };
var hd = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(R2.list(e2), () => s2.admin.discounts.list(e2), t);
  return { ...r2, ...o2 };
};
var Td = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(R2.detail(e2), () => r2.admin.discounts.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var Dd = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(R2.detail(e2), () => s2.admin.discounts.retrieveByCode(e2), t);
  return { ...r2, ...o2 };
};
var _d = (e2, t, s2, r2) => {
  let { client: o2 } = n2(), { data: m2, ...x2 } = useQuery(R2.detailCondition(t), () => o2.admin.discounts.getCondition(e2, t, s2), r2);
  return { ...m2, ...x2 };
};
var Wd = (e2, t, s2, r2) => {
  let { client: o2 } = n2(), m2 = useQueryClient();
  return useMutation((x2) => o2.admin.discounts.addConditionResourceBatch(e2, t, x2, s2), i3(m2, R2.detail(e2), r2));
};
var Yd = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation((m2) => r2.admin.discounts.deleteConditionResourceBatch(e2, t, m2), i3(o2, [R2.detail(e2)], s2));
};
var wd = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.discounts.create(r2), i3(s2, R2.lists(), e2));
};
var Fd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.update(e2, o2), i3(r2, R2.detail(e2), t));
};
var Bd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.discounts.delete(e2), i3(r2, R2.lists(), t));
};
var Vd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.addRegion(e2, o2), i3(r2, R2.detail(e2), t));
};
var Jd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.removeRegion(e2, o2), i3(r2, R2.detail(e2), t));
};
var kd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.createDynamicCode(e2, o2), i3(r2, [R2.lists(), R2.detail(e2)], t));
};
var jd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.deleteDynamicCode(e2, o2), i3(r2, [R2.lists(), R2.detail(e2)], t));
};
var zd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.createCondition(e2, o2), i3(r2, R2.detail(e2), t));
};
var Hd = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation((m2) => r2.admin.discounts.updateCondition(e2, t, m2), i3(o2, R2.detail(e2), s2));
};
var Xd = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.discounts.deleteCondition(e2, o2), i3(r2, R2.detail(e2), t));
};
var Ar = "admin_draft_orders";
var M2 = a(Ar);
var nu = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(M2.list(e2), () => s2.admin.draftOrders.list(e2), t);
  return { ...r2, ...o2 };
};
var iu = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(M2.detail(e2), () => s2.admin.draftOrders.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var lu = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.draftOrders.create(r2), i3(s2, M2.lists(), e2));
};
var Ru = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.draftOrders.update(e2, o2), i3(r2, [M2.detail(e2), M2.lists()], t));
};
var yu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.draftOrders.delete(e2), i3(r2, [M2.detail(e2), M2.lists()], t));
};
var Au = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.draftOrders.markPaid(e2), i3(r2, M2.detail(e2), t));
};
var fu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.draftOrders.addLineItem(e2, o2), i3(r2, M2.detail(e2), t));
};
var Pu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.draftOrders.removeLineItem(e2, o2), i3(r2, M2.detail(e2), t));
};
var Cu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ item_id: o2, ...m2 }) => s2.admin.draftOrders.updateLineItem(e2, o2, m2), i3(r2, M2.detail(e2), t));
};
var fr = "admin_gift_cards";
var Y2 = a(fr);
var Mu = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Y2.list(e2), () => s2.admin.giftCards.list(e2), t);
  return { ...r2, ...o2 };
};
var Ku = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Y2.detail(e2), () => s2.admin.giftCards.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var bu = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.giftCards.create(r2), i3(s2, Y2.lists(), e2));
};
var vu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.giftCards.update(e2, o2), i3(r2, [Y2.lists(), Y2.detail(e2)], t));
};
var Iu = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.giftCards.delete(e2), i3(r2, [Y2.lists(), Y2.detail(e2)], t));
};
var Cr = "admin_invites";
var ne2 = a(Cr);
var Vu = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(ne2.lists(), () => t.admin.invites.list(), e2);
  return { ...s2, ...r2 };
};
var $u = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.invites.accept(r2), i3(s2, ne2.lists(), e2));
};
var Zu = (e2, t) => {
  let { client: s2 } = n2();
  return useMutation(() => s2.admin.invites.resend(e2), t);
};
var ec = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.invites.create(r2), i3(s2, ne2.lists(), e2));
};
var tc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.invites.delete(e2), i3(r2, [ne2.lists(), ne2.detail(e2)], t));
};
var Or = "admin_notes";
var w2 = a(Or);
var pc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(w2.list(e2), () => s2.admin.notes.list(e2), t);
  return { ...r2, ...o2 };
};
var dc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(w2.detail(e2), () => s2.admin.notes.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var fc = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.notes.create(r2), i3(s2, w2.lists(), e2));
};
var Pc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.notes.update(e2, o2), i3(r2, [w2.detail(e2), w2.lists()], t));
};
var Cc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.notes.delete(e2), i3(r2, [w2.detail(e2), w2.lists()], t));
};
var gr = "admin_notifications";
var Ke2 = a(gr);
var Mc = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Ke2.list(e2), () => s2.admin.notifications.list(e2), t);
  return { ...r2, ...o2 };
};
var Lc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.notifications.resend(e2, o2), i3(r2, [Ke2.lists(), Ke2.detail(e2)], t));
};
var Bc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.update(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var Vc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.cancel(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var Jc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.complete(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var kc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.capturePayment(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var jc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.refundPayment(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var zc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createFulfillment(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var Hc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.cancelFulfillment(e2, o2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var Xc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createShipment(e2, o2), i3(r2, p2.detail(e2), t));
};
var $c = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.requestReturn(e2, o2), i3(r2, p2.detail(e2), t));
};
var Zc = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.addShippingMethod(e2, o2), i3(r2, p2.detail(e2), t));
};
var el = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orders.archive(e2), i3(r2, [p2.lists(), p2.detail(e2)], t));
};
var Ur = "admin_order_edits";
var c2 = a(Ur);
var ml = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(c2.detail(e2), () => r2.admin.orderEdits.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var pl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(c2.list(e2), () => s2.admin.orderEdits.list(e2), t);
  return { ...r2, ...o2 };
};
var fl = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.orderEdits.create(r2), i3(s2, [c2.lists(), p2.details()], e2));
};
var Pl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.delete(e2), i3(r2, [c2.detail(e2), c2.lists(), p2.details()], t));
};
var Cl = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.orderEdits.deleteItemChange(e2, t), i3(o2, [c2.detail(e2), c2.lists()], s2));
};
var Ol = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation((m2) => r2.admin.orderEdits.updateLineItem(e2, t, m2), i3(o2, [c2.detail(e2), c2.lists()], s2));
};
var xl = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.orderEdits.removeLineItem(e2, t), i3(o2, [c2.detail(e2), c2.lists()], s2));
};
var gl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orderEdits.update(e2, o2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var El = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orderEdits.addLineItem(e2, o2), i3(r2, [c2.lists(), c2.detail(e2)], t));
};
var Sl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.requestConfirmation(e2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var Ul = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.cancel(e2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var ql = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.orderEdits.confirm(e2), i3(r2, [c2.lists(), c2.detail(e2), p2.details()], t));
};
var qr = "admin_price_lists";
var y2 = { ...a(qr), detailProducts(e2, t) {
  return [...this.detail(e2), "products", { ...t || {} }];
} };
var Ll = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(y2.list(e2), () => s2.admin.priceLists.list(e2), t);
  return { ...r2, ...o2 };
};
var bl = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(y2.detailProducts(e2, t), () => r2.admin.priceLists.listProducts(e2, t), s2);
  return { ...o2, ...m2 };
};
var vl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(y2.detail(e2), () => s2.admin.priceLists.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Mr = "admin_products";
var u = a(Mr);
var Yl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(u.list(e2), () => s2.admin.products.list(e2), t);
  return { ...r2, ...o2 };
};
var wl = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(u.detail(e2), () => s2.admin.products.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Fl = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(u.detail("tags"), () => t.admin.products.listTags(), e2);
  return { ...s2, ...r2 };
};
var Hl = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.products.create(r2), i3(s2, u.lists(), e2));
};
var Xl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.update(e2, o2), i3(r2, [u.lists(), u.detail(e2)], t));
};
var $l = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.products.delete(e2), i3(r2, [u.lists(), u.detail(e2)], t));
};
var Zl = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.createVariant(e2, o2), i3(r2, [u.lists(), u.detail(e2)], t));
};
var eR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ variant_id: o2, ...m2 }) => s2.admin.products.updateVariant(e2, o2, m2), i3(r2, [u.lists(), u.detail(e2)], t));
};
var tR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.deleteVariant(e2, o2), i3(r2, [u.lists(), u.detail(e2)], t));
};
var sR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.addOption(e2, o2), i3(r2, u.detail(e2), t));
};
var rR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ option_id: o2, ...m2 }) => s2.admin.products.updateOption(e2, o2, m2), i3(r2, u.detail(e2), t));
};
var oR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.products.deleteOption(e2, o2), i3(r2, u.detail(e2), t));
};
var Qr = "admin_variants";
var et2 = a(Qr);
var cR = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(et2.list(e2), () => s2.admin.variants.list(e2), t);
  return { ...r2, ...o2 };
};
var ER = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.priceLists.create(r2), i3(s2, y2.lists(), e2));
};
var SR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.priceLists.update(e2, o2), i3(r2, [y2.detail(e2), y2.lists(), y2.detailProducts(e2)], t));
};
var UR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.priceLists.delete(e2), i3(r2, [y2.detail(e2), y2.lists()], t));
};
var qR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.priceLists.addPrices(e2, o2), i3(r2, [y2.lists(), y2.detailProducts(e2)], t));
};
var MR = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.priceLists.deletePrices(e2, o2), i3(r2, [y2.detail(e2), y2.lists(), y2.detailProducts(e2)], t));
};
var KR = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.priceLists.deleteProductPrices(e2, t), i3(o2, [y2.detail(e2), y2.lists(), u.detail(t)], s2));
};
var QR = (e2, t, s2) => {
  let { client: r2 } = n2(), o2 = useQueryClient();
  return useMutation(() => r2.admin.priceLists.deleteVariantPrices(e2, t), i3(o2, [y2.detail(e2), y2.lists(), et2.detail(t)], s2));
};
var Tr = "admin_product_tags";
var Dr = a(Tr);
var IR = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(Dr.list(e2), () => s2.admin.productTags.list(e2), t);
  return { ...r2, ...o2 };
};
var Lr = "admin_product_types";
var br = a(Lr);
var BR = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(br.list(e2), () => s2.admin.productTypes.list(e2), t);
  return { ...r2, ...o2 };
};
var vr = "admin_publishable_api_keys";
var C2 = { ...a(vr), detailSalesChannels(e2, t) {
  return [...this.detail(e2), "sales_channels", { ...t || {} }];
} };
var XR = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(C2.detail(e2), () => r2.admin.publishableApiKeys.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var $R = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(C2.list(e2), () => s2.admin.publishableApiKeys.list(e2), t);
  return { ...r2, ...o2 };
};
var ZR = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(C2.detailSalesChannels(e2, t), () => r2.admin.publishableApiKeys.listSalesChannels(e2, t), s2);
  return { ...o2, ...m2 };
};
var iy = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.publishableApiKeys.create(r2), i3(s2, [C2.lists()], e2));
};
var ay = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.publishableApiKeys.update(e2, o2), i3(r2, [C2.lists(), C2.detail(e2), C2.details()], t));
};
var my = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.publishableApiKeys.delete(e2), i3(r2, [C2.detail(e2), C2.lists()], t));
};
var py = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.publishableApiKeys.revoke(e2), i3(r2, [C2.lists(), C2.detail(e2)], t));
};
var dy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.publishableApiKeys.addSalesChannelsBatch(e2, o2), i3(r2, [C2.detailSalesChannels(e2)], t));
};
var uy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.publishableApiKeys.deleteSalesChannelsBatch(e2, o2), i3(r2, [C2.detailSalesChannels(e2)], t));
};
var Ir = "admin_regions";
var P = a(Ir);
var Cy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(P.list(e2), () => s2.admin.regions.list(e2), t);
  return { ...r2, ...o2 };
};
var Oy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(P.detail(e2), () => s2.admin.regions.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var xy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(P.detail(`${e2}_fullfillment-options`), () => s2.admin.regions.retrieveFulfillmentOptions(e2), t);
  return { ...r2, ...o2 };
};
var Ky = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.regions.create(r2), i3(s2, P.lists(), e2));
};
var Qy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.update(e2, o2), i3(r2, [P.lists(), P.detail(e2)], t));
};
var hy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.regions.delete(e2), i3(r2, [P.lists(), P.detail(e2)], t));
};
var Ty = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.addCountry(e2, o2), i3(r2, P.detail(e2), t));
};
var Dy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.deleteCountry(e2, o2), i3(r2, P.detail(e2), t));
};
var _y = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.addFulfillmentProvider(e2, o2), i3(r2, P.detail(e2), t));
};
var Ly = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.deleteFulfillmentProvider(e2, o2), i3(r2, P.detail(e2), t));
};
var by = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.addPaymentProvider(e2, o2), i3(r2, P.detail(e2), t));
};
var vy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.regions.deletePaymentProvider(e2, o2), i3(r2, P.detail(e2), t));
};
var Gr = "admin_return_reasons";
var F2 = a(Gr);
var By = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(F2.lists(), () => t.admin.returnReasons.list(), e2);
  return { ...s2, ...r2 };
};
var Vy = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(F2.detail(e2), () => s2.admin.returnReasons.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var $y = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.returnReasons.create(r2), i3(s2, F2.lists(), e2));
};
var Zy = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.returnReasons.update(e2, o2), i3(r2, [F2.detail(e2), F2.lists()], t));
};
var eA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.returnReasons.delete(e2), i3(r2, [F2.detail(e2), F2.lists()], t));
};
var Wr = "admin_returns";
var me2 = a(Wr);
var mA = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(me2.lists(), () => t.admin.returns.list(), e2);
  return { ...s2, ...r2 };
};
var yA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.returns.receive(e2, o2), i3(r2, [me2.detail(e2), me2.list()], t));
};
var AA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.returns.cancel(e2), i3(r2, [me2.detail(e2), me2.list()], t));
};
var Yr = "admin_sales_channels";
var K2 = a(Yr);
var SA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(K2.detail(e2), () => s2.admin.salesChannels.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var UA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(K2.list(e2), () => s2.admin.salesChannels.list(e2), t);
  return { ...r2, ...o2 };
};
var _A = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.salesChannels.create(r2), i3(s2, [K2.list()], e2));
};
var LA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.salesChannels.update(e2, o2), i3(r2, [K2.lists(), K2.detail(e2)], t));
};
var bA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.salesChannels.delete(e2), i3(r2, [K2.lists(), K2.detail(e2)], t));
};
var vA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.salesChannels.removeProducts(e2, o2), i3(r2, [K2.lists(), K2.detail(e2), u.list({ sales_channel_id: [e2] })], t));
};
var IA = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.salesChannels.addProducts(e2, o2), i3(r2, [K2.lists(), K2.detail(e2), u.list({ sales_channel_id: [e2] })], t));
};
var wr = "admin_shipping_options";
var B2 = a(wr);
var VA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(B2.list(e2), () => s2.admin.shippingOptions.list(e2), t);
  return { ...r2, ...o2 };
};
var JA = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(B2.detail(e2), () => s2.admin.shippingOptions.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var ZA = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.shippingOptions.create(r2), i3(s2, B2.lists(), e2));
};
var ef = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.shippingOptions.update(e2, o2), i3(r2, [B2.lists(), B2.detail(e2)], t));
};
var tf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.shippingOptions.delete(e2), i3(r2, [B2.lists(), B2.detail(e2)], t));
};
var Fr = "admin_shippingProfiles";
var V2 = a(Fr);
var df = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(V2.lists(), () => t.admin.shippingProfiles.list(), e2);
  return { ...s2, ...r2 };
};
var uf = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(V2.detail(e2), () => s2.admin.shippingProfiles.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var Pf = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.shippingProfiles.create(r2), i3(s2, V2.lists(), e2));
};
var Cf = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.shippingProfiles.update(e2, o2), i3(r2, [V2.lists(), V2.detail(e2)], t));
};
var Of = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.shippingProfiles.delete(e2), i3(r2, [V2.lists(), V2.detail(e2)], t));
};
var Br = "admin_store";
var Z2 = a(Br);
var Kf = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Z2.detail("payment_providers"), () => t.admin.store.listPaymentProviders(), e2);
  return { ...s2, ...r2 };
};
var Qf = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Z2.detail("tax_providers"), () => t.admin.store.listTaxProviders(), e2);
  return { ...s2, ...r2 };
};
var hf = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(Z2.details(), () => t.admin.store.retrieve(), e2);
  return { ...s2, ...r2 };
};
var If = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.store.update(r2), i3(s2, Z2.details(), e2));
};
var Gf = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.store.deleteCurrency(r2), i3(s2, Z2.details(), e2));
};
var Nf = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.store.deleteCurrency(r2), i3(s2, Z2.details(), e2));
};
var Vr = "admin_swaps";
var J2 = a(Vr);
var kf = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(J2.list(e2), () => s2.admin.swaps.list(e2), t);
  return { ...r2, ...o2 };
};
var jf = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(J2.detail(e2), () => s2.admin.swaps.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var sP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.createSwap(e2, o2), i3(r2, [p2.detail(e2), J2.lists()], t));
};
var rP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.cancelSwap(e2, o2), i3(r2, [p2.detail(e2), J2.lists()], t));
};
var oP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ swap_id: o2, ...m2 }) => s2.admin.orders.fulfillSwap(e2, o2, m2), i3(r2, [p2.detail(e2), J2.lists()], t));
};
var nP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ swap_id: o2, ...m2 }) => s2.admin.orders.createSwapShipment(e2, o2, m2), i3(r2, p2.detail(e2), t));
};
var iP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.orders.processSwapPayment(e2, o2), i3(r2, [p2.detail(e2), J2.lists()], t));
};
var aP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(({ swap_id: o2, fulfillment_id: m2 }) => s2.admin.orders.cancelSwapFulfillment(e2, o2, m2), i3(r2, [p2.detail(e2), J2.lists()], t));
};
var Jr = "admin_tax_rates";
var l2 = a(Jr);
var yP = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(l2.list(e2), () => s2.admin.taxRates.list(e2), t);
  return { ...r2, ...o2 };
};
var AP = (e2, t, s2) => {
  let { client: r2 } = n2(), { data: o2, ...m2 } = useQuery(l2.detail(e2), () => r2.admin.taxRates.retrieve(e2, t), s2);
  return { ...o2, ...m2 };
};
var EP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.taxRates.create(r2), i3(s2, l2.lists(), e2));
};
var SP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.update(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var UP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.taxRates.delete(e2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var qP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.addProducts(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var MP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.removeProducts(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var KP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.addProductTypes(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var QP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.removeProductTypes(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var hP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.addShippingOptions(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var TP = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.taxRates.removeShippingOptions(e2, o2), i3(r2, [l2.lists(), l2.detail(e2)], t));
};
var WP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.create(r2), i3(s2, void 0, e2));
};
var YP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.createProtected(r2), i3(s2, void 0, e2));
};
var wP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.getPresignedDownloadUrl(r2), i3(s2, void 0, e2));
};
var FP = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.uploads.delete(r2), i3(s2, void 0, e2));
};
var kr = "admin_users";
var us2 = a(kr);
var HP = (e2) => {
  let { client: t } = n2(), { data: s2, ...r2 } = useQuery(us2.lists(), () => t.admin.users.list(), e2);
  return { ...s2, ...r2 };
};
var XP = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(us2.detail(e2), () => s2.admin.users.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var oC = (e2) => {
  let { client: t } = n2(), s2 = useQueryClient();
  return useMutation((r2) => t.admin.users.create(r2), i3(s2, S2.lists(), e2));
};
var nC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.users.update(e2, o2), i3(r2, [S2.lists(), S2.detail(e2)], t));
};
var iC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.users.delete(e2), i3(r2, [S2.detail(e2), S2.lists()], t));
};
var aC = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.admin.users.resetPassword(s2), e2);
};
var mC = (e2) => {
  let { client: t } = n2();
  return useMutation((s2) => t.admin.users.sendResetPasswordToken(s2), e2);
};
var zr = "paymentCollection";
var k2 = a(zr);
var AC = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(k2.detail(e2), () => s2.admin.paymentCollections.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var EC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.paymentCollections.delete(e2), i3(r2, [k2.detail(e2), k2.lists()], t));
};
var SC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.paymentCollections.update(e2, o2), i3(r2, [k2.detail(e2), k2.lists()], t));
};
var UC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.paymentCollections.markAsAuthorized(e2), i3(r2, [k2.detail(e2), k2.lists()], t));
};
var Xr = "payment";
var ue2 = a(Xr);
var _C = (e2, t) => {
  let { client: s2 } = n2(), { data: r2, ...o2 } = useQuery(ue2.detail(e2), () => s2.admin.payments.retrieve(e2), t);
  return { ...r2, ...o2 };
};
var WC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation(() => s2.admin.payments.capturePayment(e2), i3(r2, [ue2.detail(e2), ue2.lists()], t));
};
var YC = (e2, t) => {
  let { client: s2 } = n2(), r2 = useQueryClient();
  return useMutation((o2) => s2.admin.payments.refundPayment(e2, o2), i3(r2, [ue2.detail(e2), ue2.lists()], t));
};
export {
  sm as CartProvider,
  so as MedusaProvider,
  Co as SessionCartProvider,
  Se2 as adminAuthKeys,
  W2 as adminBatchJobsKeys,
  E2 as adminCollectionKeys,
  Ue2 as adminCurrenciesKeys,
  O2 as adminCustomerGroupKeys,
  S2 as adminCustomerKeys,
  R2 as adminDiscountKeys,
  M2 as adminDraftOrderKeys,
  Y2 as adminGiftCardKeys,
  ne2 as adminInviteKeys,
  w2 as adminNoteKeys,
  Ke2 as adminNotificationKeys,
  c2 as adminOrderEditsKeys,
  p2 as adminOrderKeys,
  k2 as adminPaymentCollectionQueryKeys,
  ue2 as adminPaymentQueryKeys,
  y2 as adminPriceListKeys,
  u as adminProductKeys,
  Dr as adminProductTagKeys,
  br as adminProductTypeKeys,
  C2 as adminPublishableApiKeysKeys,
  P as adminRegionKeys,
  me2 as adminReturnKeys,
  F2 as adminReturnReasonKeys,
  K2 as adminSalesChannelsKeys,
  B2 as adminShippingOptionKeys,
  V2 as adminShippingProfileKeys,
  Z2 as adminStoreKeys,
  J2 as adminSwapKeys,
  l2 as adminTaxRateKeys,
  us2 as adminUserKeys,
  et2 as adminVariantKeys,
  Ts2 as cartKeys,
  Kt as collectionKeys,
  At as computeAmount,
  Cs2 as computeVariantPrice,
  Ne2 as customerKeys,
  ao as formatAmount,
  io as formatVariantPrice,
  ce2 as generateCartState,
  Ie2 as getVariantPrice,
  vs2 as giftCardKeys,
  se2 as orderEditQueryKeys,
  j2 as orderKeys,
  g2 as paymentCollectionQueryKeys,
  vt as productKeys,
  Bs2 as productTagKeys,
  ks2 as productTypeKeys,
  qt as useAddShippingMethodToCart,
  $u as useAdminAcceptInvite,
  od as useAdminAddCustomersToCustomerGroup,
  Wd as useAdminAddDiscountConditionResourceBatch,
  gp as useAdminAddProductsToCollection,
  IA as useAdminAddProductsToSalesChannel,
  dy as useAdminAddPublishableKeySalesChannelsBatch,
  Zc as useAdminAddShippingMethod,
  Gf as useAdminAddStoreCurrency,
  el as useAdminArchiveOrder,
  Km as useAdminBatchJob,
  Mm as useAdminBatchJobs,
  vm as useAdminCancelBatchJob,
  tp as useAdminCancelClaim,
  rp as useAdminCancelClaimFulfillment,
  Hc as useAdminCancelFulfillment,
  Vc as useAdminCancelOrder,
  Ul as useAdminCancelOrderEdit,
  AA as useAdminCancelReturn,
  rP as useAdminCancelSwap,
  aP as useAdminCancelSwapFulfillment,
  kc as useAdminCapturePayment,
  cp as useAdminCollection,
  up as useAdminCollections,
  Jc as useAdminCompleteOrder,
  Im as useAdminConfirmBatchJob,
  ql as useAdminConfirmOrderEdit,
  bm as useAdminCreateBatchJob,
  Zm as useAdminCreateClaim,
  op as useAdminCreateClaimShipment,
  Cp as useAdminCreateCollection,
  xd as useAdminCreateCustomer,
  td as useAdminCreateCustomerGroup,
  wd as useAdminCreateDiscount,
  lu as useAdminCreateDraftOrder,
  kd as useAdminCreateDynamicDiscountCode,
  zc as useAdminCreateFulfillment,
  bu as useAdminCreateGiftCard,
  ec as useAdminCreateInvite,
  fc as useAdminCreateNote,
  fl as useAdminCreateOrderEdit,
  wP as useAdminCreatePresignedDownloadUrl,
  ER as useAdminCreatePriceList,
  qR as useAdminCreatePriceListPrices,
  Hl as useAdminCreateProduct,
  sR as useAdminCreateProductOption,
  qP as useAdminCreateProductTaxRates,
  KP as useAdminCreateProductTypeTaxRates,
  iy as useAdminCreatePublishableApiKey,
  Ky as useAdminCreateRegion,
  $y as useAdminCreateReturnReason,
  _A as useAdminCreateSalesChannel,
  Xc as useAdminCreateShipment,
  ZA as useAdminCreateShippingOption,
  Pf as useAdminCreateShippingProfile,
  hP as useAdminCreateShippingTaxRates,
  sP as useAdminCreateSwap,
  nP as useAdminCreateSwapShipment,
  EP as useAdminCreateTaxRate,
  oC as useAdminCreateUser,
  Zl as useAdminCreateVariant,
  Tp as useAdminCurrencies,
  Rd as useAdminCustomer,
  Jp as useAdminCustomerGroup,
  jp as useAdminCustomerGroupCustomers,
  kp as useAdminCustomerGroups,
  ld as useAdminCustomers,
  xp as useAdminDeleteCollection,
  rd as useAdminDeleteCustomerGroup,
  Bd as useAdminDeleteDiscount,
  Yd as useAdminDeleteDiscountConditionResourceBatch,
  yu as useAdminDeleteDraftOrder,
  jd as useAdminDeleteDynamicDiscountCode,
  FP as useAdminDeleteFile,
  Iu as useAdminDeleteGiftCard,
  tc as useAdminDeleteInvite,
  Cc as useAdminDeleteNote,
  Pl as useAdminDeleteOrderEdit,
  Cl as useAdminDeleteOrderEditItemChange,
  EC as useAdminDeletePaymentCollection,
  UR as useAdminDeletePriceList,
  MR as useAdminDeletePriceListPrices,
  KR as useAdminDeletePriceListProductPrices,
  QR as useAdminDeletePriceListVariantPrices,
  $l as useAdminDeleteProduct,
  oR as useAdminDeleteProductOption,
  MP as useAdminDeleteProductTaxRates,
  QP as useAdminDeleteProductTypeTaxRates,
  vA as useAdminDeleteProductsFromSalesChannel,
  my as useAdminDeletePublishableApiKey,
  hy as useAdminDeleteRegion,
  eA as useAdminDeleteReturnReason,
  bA as useAdminDeleteSalesChannel,
  Cm as useAdminDeleteSession,
  tf as useAdminDeleteShippingOption,
  Of as useAdminDeleteShippingProfile,
  TP as useAdminDeleteShippingTaxRates,
  Nf as useAdminDeleteStoreCurrency,
  UP as useAdminDeleteTaxRate,
  iC as useAdminDeleteUser,
  tR as useAdminDeleteVariant,
  Td as useAdminDiscount,
  Vd as useAdminDiscountAddRegion,
  zd as useAdminDiscountCreateCondition,
  Xd as useAdminDiscountRemoveCondition,
  Jd as useAdminDiscountRemoveRegion,
  Hd as useAdminDiscountUpdateCondition,
  hd as useAdminDiscounts,
  iu as useAdminDraftOrder,
  fu as useAdminDraftOrderAddLineItem,
  Au as useAdminDraftOrderRegisterPayment,
  Pu as useAdminDraftOrderRemoveLineItem,
  Cu as useAdminDraftOrderUpdateLineItem,
  nu as useAdminDraftOrders,
  sp as useAdminFulfillClaim,
  oP as useAdminFulfillSwap,
  Dd as useAdminGetDiscountByCode,
  _d as useAdminGetDiscountCondition,
  um as useAdminGetSession,
  Ku as useAdminGiftCard,
  Mu as useAdminGiftCards,
  Vu as useAdminInvites,
  Pm as useAdminLogin,
  UC as useAdminMarkPaymentCollectionAsAuthorized,
  dc as useAdminNote,
  pc as useAdminNotes,
  Mc as useAdminNotifications,
  Jm as useAdminOrder,
  ml as useAdminOrderEdit,
  El as useAdminOrderEditAddLineItem,
  xl as useAdminOrderEditDeleteLineItem,
  Ol as useAdminOrderEditUpdateLineItem,
  pl as useAdminOrderEdits,
  Vm as useAdminOrders,
  _C as useAdminPayment,
  AC as useAdminPaymentCollection,
  WC as useAdminPaymentsCapturePayment,
  YC as useAdminPaymentsRefundPayment,
  vl as useAdminPriceList,
  bl as useAdminPriceListProducts,
  Ll as useAdminPriceLists,
  iP as useAdminProcessSwapPayment,
  wl as useAdminProduct,
  Fl as useAdminProductTagUsage,
  IR as useAdminProductTags,
  BR as useAdminProductTypes,
  Yl as useAdminProducts,
  XR as useAdminPublishableApiKey,
  ZR as useAdminPublishableApiKeySalesChannels,
  $R as useAdminPublishableApiKeys,
  yA as useAdminReceiveReturn,
  jc as useAdminRefundPayment,
  Oy as useAdminRegion,
  Ty as useAdminRegionAddCountry,
  _y as useAdminRegionAddFulfillmentProvider,
  by as useAdminRegionAddPaymentProvider,
  Ly as useAdminRegionDeleteFulfillmentProvider,
  vy as useAdminRegionDeletePaymentProvider,
  xy as useAdminRegionFulfillmentOptions,
  Dy as useAdminRegionRemoveCountry,
  Cy as useAdminRegions,
  nd as useAdminRemoveCustomersFromCustomerGroup,
  Ep as useAdminRemoveProductsFromCollection,
  uy as useAdminRemovePublishableKeySalesChannelsBatch,
  Sl as useAdminRequestOrderEditConfirmation,
  $c as useAdminRequestReturn,
  Zu as useAdminResendInvite,
  Lc as useAdminResendNotification,
  aC as useAdminResetPassword,
  Vy as useAdminReturnReason,
  By as useAdminReturnReasons,
  mA as useAdminReturns,
  py as useAdminRevokePublishableApiKey,
  SA as useAdminSalesChannel,
  UA as useAdminSalesChannels,
  mC as useAdminSendResetPasswordToken,
  JA as useAdminShippingOption,
  VA as useAdminShippingOptions,
  uf as useAdminShippingProfile,
  df as useAdminShippingProfiles,
  hf as useAdminStore,
  Kf as useAdminStorePaymentProviders,
  Qf as useAdminStoreTaxProviders,
  jf as useAdminSwap,
  kf as useAdminSwaps,
  AP as useAdminTaxRate,
  yP as useAdminTaxRates,
  ep as useAdminUpdateClaim,
  Op as useAdminUpdateCollection,
  Gp as useAdminUpdateCurrency,
  gd as useAdminUpdateCustomer,
  sd as useAdminUpdateCustomerGroup,
  Fd as useAdminUpdateDiscount,
  Ru as useAdminUpdateDraftOrder,
  vu as useAdminUpdateGiftCard,
  Pc as useAdminUpdateNote,
  Bc as useAdminUpdateOrder,
  gl as useAdminUpdateOrderEdit,
  SC as useAdminUpdatePaymentCollection,
  SR as useAdminUpdatePriceList,
  Xl as useAdminUpdateProduct,
  rR as useAdminUpdateProductOption,
  ay as useAdminUpdatePublishableApiKey,
  Qy as useAdminUpdateRegion,
  Zy as useAdminUpdateReturnReason,
  LA as useAdminUpdateSalesChannel,
  ef as useAdminUpdateShippingOption,
  Cf as useAdminUpdateShippingProfile,
  If as useAdminUpdateStore,
  SP as useAdminUpdateTaxRate,
  nC as useAdminUpdateUser,
  eR as useAdminUpdateVariant,
  WP as useAdminUploadFile,
  YP as useAdminUploadProtectedFile,
  XP as useAdminUser,
  HP as useAdminUsers,
  cR as useAdminVariants,
  fi as useAuthorizePaymentSession,
  Pi as useAuthorizePaymentSessionsBatch,
  tm as useCart,
  Vn as useCartOrder,
  Ca as useCartShippingOptions,
  qa as useCartSwap,
  Yo as useCollection,
  wo as useCollections,
  Et as useCompleteCart,
  vn as useCompleteOrderEdit,
  xt as useCreateCart,
  tn as useCreateCustomer,
  Pn as useCreateLineItem,
  St as useCreatePaymentSession,
  ua as useCreateReturn,
  Ta as useCreateSwap,
  Ho as useCustomerOrders,
  bn as useDeclineOrderEdit,
  On as useDeleteLineItem,
  Do as useDeletePaymentSession,
  Uo as useGetCart,
  un as useGiftCard,
  ei as useGrantOrderAccess,
  yi as useManageMultiplePaymentSessions,
  Ai as useManagePaymentSession,
  zo as useMeCustomer,
  n2 as useMedusa,
  Bn as useOrder,
  Mn as useOrderEdit,
  Jn as useOrders,
  mi as usePaymentCollection,
  Ci as usePaymentCollectionRefreshPaymentSession,
  wi as useProduct,
  Mi as useProductTags,
  Li as useProductTypes,
  Yi as useProducts,
  To as useRefreshPaymentSession,
  Hi as useRegion,
  zi as useRegions,
  Zn as useRequestOrderAccess,
  oa as useReturnReason,
  ra as useReturnReasons,
  Oo as useSessionCart,
  Ut as useSetPaymentSession,
  Pa as useShippingOptions,
  _o as useStartCheckout,
  gt as useUpdateCart,
  Cn as useUpdateLineItem,
  sn as useUpdateMe,
  ho as useUpdatePaymentSession
};
//# sourceMappingURL=medusa-react.js.map
